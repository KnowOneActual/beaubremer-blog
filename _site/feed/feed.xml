<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beau Bremer&#39;s Blog</title>
  <subtitle>A collection of articles and thoughts on technology and project management.</subtitle>
  <link href="https://blog.beaubremer.com/feed/feed.xml" rel="self"/>
  <link href="https://blog.beaubremer.com/"/>
  <updated>2025-06-12T00:00:00Z</updated>
  <id>https://blog.beaubremer.com/</id>
  <author>
    <name>Beau Bremer</name>
    <email>support@beaubremer.com</email>
  </author>
  <entry>
    <title>Essential Git: Revert part 2</title>
    <link href="https://blog.beaubremer.com/posts/Essential_Git%20part_2/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Essential_Git%20part_2/</id>
    <content xml:lang="en" type="html">&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Working with Git is fantastic for managing your code, but sometimes, you push changes you later realize aren&#39;t quite right. Maybe a feature introduced a bug, or a configuration change is causing problems. When this happens, git revert comes to the rescue!&lt;/p&gt;
&lt;p&gt;It&#39;s a super important tool, especially when you&#39;ve already shared your work (like pushing to a remote repository or deploying to a service like Vercel). What is git revert?&lt;/p&gt;
&lt;p&gt;Simply put, git revert creates new commits that undo the changes from previous commits. It&#39;s like writing an &amp;quot;undo&amp;quot; commit.&lt;/p&gt;
&lt;p&gt;The key difference from other Git commands like git reset is that git revert does not rewrite your project&#39;s history. Instead, it adds new history that cancels out the old. This makes it a much safer option when:&lt;/p&gt;
&lt;p&gt;You&#39;ve already pushed your commits to a shared remote repository.
You&#39;re working on a public branch (like main or master).
You need to maintain a clear, linear history of changes.&lt;/p&gt;
&lt;p&gt;When to Use git revert&lt;/p&gt;
&lt;p&gt;Think of git revert as your go-to for &amp;quot;undoing&amp;quot; when:&lt;/p&gt;
&lt;p&gt;You&#39;ve pushed a bad commit: This is exactly what we just experienced. If you have a commit causing issues on your live Vercel site, reverting it safely brings you back without erasing the fact that the commit ever existed.
You want to undo specific commits in your history: You can pick and choose which commits to undo, even if they&#39;re not the very last ones.
You need to collaborate: Since it doesn&#39;t rewrite history, git revert is polite to your teammates&#39; repositories.&lt;/p&gt;
&lt;p&gt;Step-by-Step Tutorial: Reverting a Commit&lt;/p&gt;
&lt;p&gt;Let&#39;s walk through how to use git revert to undo a specific commit. Step 1: Identify the Commit to Revert&lt;/p&gt;
&lt;p&gt;First, you need to find the commit hash (the unique ID) of the commit you want to undo. This should be the commit that introduced the changes you want to reverse.&lt;/p&gt;
&lt;p&gt;Open your terminal or Git Bash in your project&#39;s root directory and run:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git log&lt;/p&gt;
&lt;p&gt;This command shows you your project&#39;s commit history, with the most recent commits at the top. Scroll down until you find the commit you want to undo. The commit hash is the long string of characters next to commit (e.g., 71a224ee41eec4599329bb65c893de855d441f62).&lt;/p&gt;
&lt;p&gt;Once you&#39;ve found it, copy its full hash. Step 2: Perform the Revert&lt;/p&gt;
&lt;p&gt;Now, use the git revert command with the commit hash you copied.&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git revert&lt;/p&gt;
&lt;p&gt;Replace with the actual hash.&lt;/p&gt;
&lt;p&gt;What happens next?&lt;/p&gt;
&lt;p&gt;Git will attempt to reverse the changes introduced by that commit.
If the revert is straightforward (no conflicts), Git will automatically prepare a new commit for you.&lt;/p&gt;
&lt;p&gt;Step 3: Handle the Commit Message&lt;/p&gt;
&lt;p&gt;When git revert prepares a new commit, it will automatically open your default Git editor (like Vim or Nano in the terminal, or potentially VS Code if configured) with a pre-filled commit message. This message typically starts with &amp;quot;Revert&amp;quot; and includes information about the commit you&#39;re undoing.&lt;/p&gt;
&lt;p&gt;You can accept the default message as is.
You can add your own notes to explain why you&#39;re reverting.&lt;/p&gt;
&lt;p&gt;To save and exit the commit message:&lt;/p&gt;
&lt;p&gt;If it&#39;s Vim: Press the Esc key, then type :wq and press Enter.
If it&#39;s Nano, press Ctrl+X, then Y to confirm saving, and then press Enter.&lt;/p&gt;
&lt;p&gt;Once you save and exit, Git will create the new &amp;quot;revert&amp;quot; commit. Step 4: Push Your Reverted Changes&lt;/p&gt;
&lt;p&gt;Finally, push your new revert commit to your remote repository (e.g., GitHub, GitLab, or Vercel).&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;p&gt;This will update your remote branch, and if you&#39;re using Vercel, it will trigger a new deployment with the reverted code. Troubleshooting Common git revert Issues&lt;/p&gt;
&lt;p&gt;Sometimes, git revert isn&#39;t a smooth ride. Here are the most common bumps you might hit and how to fix them: Issue 1: Merge Conflicts (CONFLICT (content): Merge conflict in )&lt;/p&gt;
&lt;p&gt;This is what we faced! It means Git found changes in the commit you&#39;re reverting that overlap with other changes made since that commit. Git doesn&#39;t know which version to keep, so it asks you to decide.&lt;/p&gt;
&lt;p&gt;How to fix it:&lt;/p&gt;
&lt;p&gt;Identify the Conflict: Git will tell you which files have conflicts (e.g., script.js). Open these files in your code editor.&lt;/p&gt;
&lt;p&gt;Look for Conflict Markers: Inside the conflicted file, you&#39;ll see special markers like this:
HTML&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD // Code from your current branch (your latest work)&lt;/p&gt;
&lt;p&gt;// Code from the commit you are trying to revert (the older version)&lt;/p&gt;
&lt;p&gt;Manually Resolve:&lt;/p&gt;
&lt;p&gt;Delete the Git conflict markers (&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;, =======, &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;).
Edit the code within that section. Since you&#39;re trying to undo, you&#39;ll typically want to delete the code that was introduced by the commit you&#39;re reverting (the part between ======= and &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;) and keep the HEAD version, or combine them as needed to achieve the desired state of the file without the problematic changes.
Save the file.&lt;/p&gt;
&lt;p&gt;Stage the Resolved File: After fixing the file and saving it, you must tell Git that you&#39;ve resolved the conflict:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git add
Example: git add script.js&lt;/p&gt;
&lt;p&gt;Complete the Revert Commit: Now that the conflict is staged, you can finalize the revert:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git commit&lt;/p&gt;
&lt;p&gt;This will open the commit message editor. Save and exit as in Step 3 of the main tutorial.&lt;/p&gt;
&lt;p&gt;Issue 2: &amp;quot;Nothing to commit&amp;quot; or &amp;quot;empty revert&amp;quot;&lt;/p&gt;
&lt;p&gt;This message appears if the commit you&#39;re trying to revert doesn&#39;t actually introduce any new changes, or if those changes have already been undone by a subsequent commit. Git determines there&#39;s nothing to revert.&lt;/p&gt;
&lt;p&gt;What to do:&lt;/p&gt;
&lt;p&gt;If you&#39;re sure there were changes, double-check your git log to ensure you picked the correct commit hash.
If the changes truly vanished or were undone, you might not need to do anything.&lt;/p&gt;
&lt;p&gt;Issue 3: Reverting a Range of Commits&lt;/p&gt;
&lt;p&gt;If you want to undo several commits in a sequence, you can specify a range:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git revert ..&lt;/p&gt;
&lt;p&gt;This will revert each commit one by one. You might be prompted for a commit message for each revert, or you might hit merge conflicts for each.
You can add --no-edit to use the default message for each revert without opening the editor: git revert --no-edit &lt;FIRST&gt;..&lt;LAST&gt;
Or --no-commit to stage all reverts as one single new commit, which is often cleaner: git revert --no-commit &lt;FIRST&gt;..&lt;LAST&gt; followed by a single git commit.&lt;/LAST&gt;&lt;/FIRST&gt;&lt;/LAST&gt;&lt;/FIRST&gt;&lt;/p&gt;
&lt;p&gt;Issue 4: You Need to Go Back to an Exact Past State, Not Just Undo Specific Commits&lt;/p&gt;
&lt;p&gt;Sometimes, you don&#39;t just want to undo specific commits, but instead completely reset your branch to how it looked at a previous point in history, discarding everything that came after. This is where git reset --hard comes in.&lt;/p&gt;
&lt;p&gt;WARNING: git reset --hard rewrites history. If you&#39;ve pushed these commits, using git reset --hard followed by git push --force will cause problems for collaborators who have the older history. Only use this if you are absolutely sure you are the sole contributor or can coordinate with your team.&lt;/p&gt;
&lt;p&gt;How to do it (use with extreme caution):&lt;/p&gt;
&lt;p&gt;Find the desired commit hash: Use git log to find the commit hash of the exact state you want your branch to be in.
Reset locally:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;git reset --hard&lt;/p&gt;
&lt;p&gt;Force Push:&lt;/p&gt;
&lt;p&gt;Bash command&lt;/p&gt;
&lt;p&gt;Git push --force&lt;/p&gt;
&lt;p&gt;Git revert is a powerful and safe way to manage your project&#39;s history. Understanding how to use it, especially for handling conflicts, will save you a lot of headaches in your development journey!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Essential Git Part 1</title>
    <link href="https://blog.beaubremer.com/posts/Essential_Git%20part_1/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Essential_Git%20part_1/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Your Essential Git Toolkit: A Friendly Guide&lt;/p&gt;
&lt;p&gt;Git can seem a bit intimidating at first, but it&#39;s just a system to help you keep track of changes in your code (or any files, for that matter) and collaborate smoothly. Think of it as a super-powered save button with a memory of every single change you&#39;ve ever made.&lt;/p&gt;
&lt;p&gt;Let&#39;s dive into the commands you&#39;ll use most often:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git status&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This one is like your personal project assistant.&lt;/p&gt;
&lt;p&gt;Why you use it: Before you do anything else, you&#39;ll want to know what&#39;s going on. Git status tells you which files you&#39;ve changed, which ones are new, and whether anything is ready to be saved. It&#39;s your quick check-in to see the current state of your working directory compared to your last saved version.
How you use it: Just type git status in your terminal when you&#39;re in your project folder. It&#39;ll give you a clear rundown.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;git add . (or git add &lt;code&gt;filename&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is where you tell Git, &amp;quot;Hey, I want to save these changes!&amp;quot;&lt;/p&gt;
&lt;p&gt;Why you use it: When you make changes to your files, Git doesn&#39;t automatically track them for your next save. You need to explicitly tell Git which changes you want to include in your next &amp;quot;snapshot&amp;quot; (called a commit). Using git add . is a common shortcut to add all modified and new files in your current directory and its subdirectories to the &amp;quot;staging area.&amp;quot; If you only want to add a specific file, you&#39;d use git add &lt;filename&gt;.
How you use it: After you&#39;ve made some changes, run git add . to stage everything, or git add my-new-feature.js if you&#39;re just adding one file. You&#39;ll often run git status right after this to confirm what you&#39;ve staged.&lt;/filename&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;git commit -m &amp;quot;Your descriptive message here&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is your actual &amp;quot;save&amp;quot; button.&lt;/p&gt;
&lt;p&gt;Why you use it: A commit is a snapshot of your project at a specific point in time. It&#39;s like taking a picture of your entire project&#39;s state. The -m flag lets you add a short, descriptive message about what changes you made in that commit. Good commit messages are essential – they help you (and others) understand the history of your project.
How you use it: Once you&#39;ve staged your changes with git add, you&#39;ll type something like git commit -m &amp;quot;Added user login functionality and fixed button styling.&amp;quot; Make sure your message is clear and concise!&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;git push origin main&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to share your work with the world (or your team)!&lt;/p&gt;
&lt;p&gt;Why you use it: After you&#39;ve committed your changes locally, they&#39;re only on your computer. To share them with others or to back them up on a remote server (like GitHub, GitLab, or Bitbucket), you use git push. origin typically refers to the default remote repository where your project lives online, and main is the name of the branch you&#39;re pushing to (it used to be called master, but main is the new standard).
How you use it: After you&#39;ve committed, just run git push origin main. If you&#39;re working on a different branch, you&#39;d replace main with your branch name.&lt;/p&gt;
&lt;p&gt;A Few Extra Tips!&lt;/p&gt;
&lt;p&gt;Branches are your friends: While we focused on main branch, Git is fantastic because you can create &amp;quot;branches&amp;quot; for new features or bug fixes. This lets you work on something new without messing up the main, stable version of your project. Once your work is ready, you can merge it back into the main branch.
Don&#39;t be afraid to experiment: Git is designed to be undo-friendly. If you make a mistake, there&#39;s usually a way to fix it. That&#39;s why it&#39;s so great!
Practice makes perfect: The more you use these commands, the more natural they&#39;ll feel. Try creating a small test project and just playing around with making changes, adding, committing, and pushing.&lt;/p&gt;
&lt;p&gt;I hope this helps you feel more comfortable jumping into the world of Git! It&#39;s an incredibly valuable tool for anyone working with code. Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Learned to Stop Worrying and Love Git Branches</title>
    <link href="https://blog.beaubremer.com/posts/2025-06-12-a-guide-to-git-branches/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/2025-06-12-a-guide-to-git-branches/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;Have you ever been deep in concentration, adding a new feature to your website, and you suddenly realize... you&#39;ve broken everything? The page won&#39;t load, styles are a mess, and panic sets in. I&#39;ve certainly been there. For a long time, I did all my work directly on my main branch—the one that my live site was built from. Every change was a high-stakes gamble.&lt;/h2&gt;
&lt;p&gt;Then, I embraced a professional workflow that completely changed the game: &lt;strong&gt;Git branching&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Think of your &lt;code&gt;main&lt;/code&gt; branch as the &amp;quot;golden copy&amp;quot; of your project. It&#39;s the version that is live, working, and stable. A branch is like making a safe, parallel copy of your project where you can experiment freely. If your new idea works, you merge it into the main copy. If it&#39;s a disaster, you simply delete the branch, and the golden copy remains untouched.&lt;/p&gt;
&lt;p&gt;It brings peace of mind to the development process, and here’s why you should be using it.&lt;/p&gt;
&lt;h3&gt;Why Bother with Branches?&lt;/h3&gt;
&lt;p&gt;It might seem like a few extra steps, but the benefits are huge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Safety:&lt;/strong&gt; Your &lt;code&gt;main&lt;/code&gt; branch is always protected. You can be confident that it&#39;s in a deployable, working state at all times. No more &amp;quot;I broke the live site!&amp;quot; panic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Freedom to Experiment:&lt;/strong&gt; Want to try a completely new layout or a wild idea? Create a branch! You can make a mess, try things out, and break whatever you want. If it doesn&#39;t work out, there&#39;s no harm done. Just delete the branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organization:&lt;/strong&gt; You can create a specific branch for every new feature or bug fix. This keeps your work isolated and easy to track. For example, &lt;code&gt;feature/new-contact-form&lt;/code&gt; or &lt;code&gt;fix/mobile-menu-bug&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collaboration &amp;amp; Review:&lt;/strong&gt; If you work on a team, branches are essential. But even for solo developers, they allow you to use Pull Requests on GitHub to review your own work before merging it, which is a great way to catch mistakes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;My Simple 5-Step Branching Workflow&lt;/h3&gt;
&lt;p&gt;Recently, I wanted to improve the navigation on my blog. On my homepage, I wanted the header link to point back to my main portfolio, but on individual posts, I wanted it to point back to the blog&#39;s homepage. This was a perfect use case for a feature branch.&lt;/p&gt;
&lt;p&gt;Here’s the exact workflow I followed:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Start Clean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before starting anything new, I made sure my local project was in sync with the live version on GitHub.&lt;/p&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;h1&gt;Switch to the main branch&lt;/h1&gt;
&lt;p&gt;git checkout main&lt;/p&gt;
&lt;h1&gt;Pull the latest changes from GitHub&lt;/h1&gt;
&lt;p&gt;git pull origin main&lt;/p&gt;
&lt;p&gt;Step 2: Create the New Branch&lt;/p&gt;
&lt;p&gt;I created a new branch from main and immediately switched to it. I gave it a descriptive name.
Bash&lt;/p&gt;
&lt;h1&gt;The -b flag creates a new branch and checks it out in one step&lt;/h1&gt;
&lt;p&gt;git checkout -b feature/contextual-header-link&lt;/p&gt;
&lt;p&gt;Step 3: Do the Work&lt;/p&gt;
&lt;p&gt;On my new branch, I safely edited my layout file (_includes/layouts/base.njk), adding the logic to change the link based on the page URL. I made a few commits along the way to save my progress.
Bash&lt;/p&gt;
&lt;h1&gt;After making some edits...&lt;/h1&gt;
&lt;p&gt;git add .
git commit -m &amp;quot;feat: Make header link contextual&amp;quot;&lt;/p&gt;
&lt;p&gt;Step 4: Propose the Changes (The Pull Request)&lt;/p&gt;
&lt;p&gt;Once I was happy with how it worked locally, I pushed my new branch to GitHub.
Bash&lt;/p&gt;
&lt;p&gt;git push -u origin feature/contextual-header-link&lt;/p&gt;
&lt;p&gt;Then, on the GitHub website, I opened a Pull Request (PR). A PR is a formal way of saying, &amp;quot;Hey main branch, I have these new changes on my feature/contextual-header-link branch. Please review them and pull them in.&amp;quot;&lt;/p&gt;
&lt;p&gt;Step 5: Merge and Clean Up&lt;/p&gt;
&lt;p&gt;On the Pull Request page, I could see all my changes one last time. Everything looked good, so I clicked the &amp;quot;Merge pull request&amp;quot; button. This took my work and safely merged it into the main branch, which automatically triggered a new deployment on Netlify.&lt;/p&gt;
&lt;p&gt;After merging, I deleted the feature branch to keep my repository tidy.&lt;/p&gt;
&lt;p&gt;This workflow might seem like a lot at first, but it quickly becomes second nature. It brings a level of safety and organization to a project that is absolutely essential for professional development. Give it a try on your next feature!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Welcome to the Blog</title>
    <link href="https://blog.beaubremer.com/posts/my-first-post/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/my-first-post/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;It&#39;s Alive!&lt;/h2&gt;
&lt;p&gt;Welcome! This is a sample post to make sure everything is working correctly.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dive into QLab</title>
    <link href="https://blog.beaubremer.com/posts/dive_Qlab/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/dive_Qlab/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Hey everyone! Ever wondered how those amazing live shows, plays, or even presentations manage to flawlessly switch between music, video, and lights? A lot of times, the magic behind the scenes is thanks to a fantastic piece of software called QLab.&lt;/p&gt;
&lt;p&gt;QLab is a powerful tool for show control, used by professionals and hobbyists alike to create incredibly precise and complex cue lists. But don&#39;t let &amp;quot;powerful&amp;quot; scare you off – it&#39;s also incredibly intuitive once you get the hang of it, and it can really elevate your projects.&lt;/p&gt;
&lt;p&gt;Today, we&#39;re going to take a super quick look at QLab and then dive into one of its most common uses: adding music cues. Get ready to make your audio playback smooth as silk!
Getting Started with QLab&lt;/p&gt;
&lt;p&gt;First things first, if you don&#39;t have QLab, you can download it for free from the Figure 53 website. The free version, called QLab Free, offers a ton of features, especially for audio playback, which is perfect for getting started.&lt;/p&gt;
&lt;p&gt;Once you open QLab, you&#39;ll see a clean workspace. This is where you&#39;ll build your &amp;quot;cue list,&amp;quot; which is essentially a chronological list of everything you want to happen during your show.
Quick Tutorial: Adding Music Cues in QLab&lt;/p&gt;
&lt;p&gt;Let&#39;s get straight to it and add some music!&lt;/p&gt;
&lt;p&gt;Open Your Workspace: When you open QLab, you&#39;ll usually be presented with a new, blank workspace. This is your canvas.&lt;/p&gt;
&lt;p&gt;Drag and Drop Your Audio: The easiest way to get music into QLab is to simply drag an audio file (like an MP3, WAV, or AIFF) directly from your computer&#39;s folders into the QLab window.
Pro Tip: QLab prefers uncompressed audio files (like WAV or AIFF) for the best quality and performance, but MP3s work just fine for many applications, especially for getting started.&lt;/p&gt;
&lt;p&gt;Meet Your First Cue: Once you drag in an audio file, QLab automatically creates an &amp;quot;Audio Cue&amp;quot; for it. You&#39;ll see it appear in your cue list. Each cue has a &amp;quot;Q Number&amp;quot; (its position in the list) and a &amp;quot;Q Name&amp;quot; (usually the file name by default).&lt;/p&gt;
&lt;p&gt;The Inspector – Your Control Panel: Below your cue list, you&#39;ll see the &amp;quot;Inspector.&amp;quot; This is where all the magic happens! When you select a cue, the Inspector shows you all the properties and settings for that specific cue.
For an audio cue, you&#39;ll see tabs like &amp;quot;Levels&amp;quot; (for volume), &amp;quot;Time &amp;amp; Loops&amp;quot; (for start/end times and looping), and &amp;quot;Audio&amp;quot; (for routing to different outputs).&lt;/p&gt;
&lt;p&gt;Setting Playback:
Volume: Go to the &amp;quot;Levels&amp;quot; tab in the Inspector. You can adjust the overall volume of your music cue here. You&#39;ll see a fader you can drag up and down.
Start and End Times: In the &amp;quot;Time &amp;amp; Loops&amp;quot; tab, you can set exactly when your audio starts and ends within the file. This is super handy if you only want to play a specific section of a song. Just drag the start and end markers on the waveform, or type in specific times.&lt;/p&gt;
&lt;p&gt;Playing Your Cue:
&amp;quot;Go&amp;quot; Button: The big &amp;quot;Go&amp;quot; button at the bottom of the QLab window is your best friend. Click it (or press the Spacebar, which is the default hotkey) to trigger the selected cue.
Stop Button: Need to stop a cue? Click the &amp;quot;Stop&amp;quot; button next to &amp;quot;Go.&amp;quot;&lt;/p&gt;
&lt;p&gt;What&#39;s Next?&lt;/p&gt;
&lt;p&gt;This is just the tip of the iceberg with QLab, but understanding how to add and control basic audio cues is a huge first step. From here, you can explore:&lt;/p&gt;
&lt;p&gt;Fades: Make your music fade in and out smoothly.
Cue Triggers: How to automatically trigger cues, or link them to other cues.
Hotkeys: Assigning keyboard shortcuts for quick playback.
Groups: Organizing multiple cues together.&lt;/p&gt;
&lt;p&gt;QLab might seem a little intimidating at first glance, but once you start playing around with it, you&#39;ll discover how powerful and fun it is. It truly opens up a world of possibilities for controlling your live events with precision and creativity.&lt;/p&gt;
&lt;p&gt;Happy cueing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Chose Eleventy for My Blog (And How I Secured It)</title>
    <link href="https://blog.beaubremer.com/posts/Eleventy_for_My_Blog/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Eleventy_for_My_Blog/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;After getting my main portfolio site into a stable, secure state, I decided it was time to add a blog. My core requirements were simple but non-negotiable: it had to be modern, straightforward to maintain, and—most importantly—built in a way that couldn&#39;t possibly break my main portfolio site during development.&lt;/p&gt;
&lt;p&gt;This led me down the path of creating a completely separate, standalone blog site. Here’s a look at the &amp;quot;why&amp;quot; behind the tools I chose and the security precautions we took along the way.
Why Eleventy? The &amp;quot;Keep It Simple&amp;quot; Philosophy&lt;/p&gt;
&lt;p&gt;In today&#39;s landscape of complex JavaScript frameworks, I was looking for something simpler. After some research, I landed on Eleventy (11ty), a modern Static Site Generator (SSG).&lt;/p&gt;
&lt;p&gt;It was the perfect choice for a few key reasons:&lt;/p&gt;
&lt;p&gt;Simplicity and Flexibility: Eleventy doesn&#39;t lock you into a heavy framework like React or Vue. It&#39;s incredibly flexible and un-opinionated, letting you work with simple templates and data. This felt perfect for a straightforward, content-focused blog.
JavaScript-Based: The entire configuration is done in plain JavaScript (.eleventy.js), which felt comfortable and accessible. There was no need to learn a new programming language just to build a blog.
Peak Performance &amp;amp; Security: By default, Eleventy generates pre-built, static HTML files. This means there&#39;s no database to hack and no complex server-side code running on every page view. The result is a site that is incredibly fast and secure right out of the box.&lt;/p&gt;
&lt;p&gt;A Security-First Approach&lt;/p&gt;
&lt;p&gt;A static site is secure by default, but I wanted to go further and ensure it was hardened against modern web vulnerabilities. The main tool for this was a netlify.toml file placed at the root of the project, which allowed me to define custom HTTP security headers.&lt;/p&gt;
&lt;p&gt;Here are the key security layers we implemented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content Security Policy (CSP): The Digital Bouncer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The most important header we added was a strong Content Security Policy. Think of a CSP as a bouncer for your website—it maintains a strict guest list of all the resources (scripts, styles, fonts, etc.) that are allowed to load on the page. Anything not on the list gets blocked.&lt;/p&gt;
&lt;p&gt;My policy explicitly whitelists trusted sources for each type of content:&lt;/p&gt;
&lt;p&gt;script-src: Only allows scripts from my own domain and the trusted Tailwind CSS CDN.
style-src: Only allows stylesheets from my domain and Google Fonts.
font-src: Only allows fonts to be downloaded from Google&#39;s font servers (fonts.gstatic.com).
object-src &#39;none&#39;: Completely blocks older, insecure plugins like Flash from ever running.&lt;/p&gt;
&lt;p&gt;The &#39;unsafe-inline&#39; Caveat: The one necessary compromise was allowing &#39;unsafe-inline&#39; for styles. This was required for the Tailwind CSS CDN script to work, as it dynamically injects styles into the page. However, the risk is heavily mitigated because the overall source of any scripts is still locked down by the rest of the policy.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Other Essential Headers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Beyond the CSP, we added several other headers for a layered defense:&lt;/p&gt;
&lt;p&gt;Strict-Transport-Security (HSTS): Ensures that browsers only ever communicate with my site over a secure HTTPS connection.
X-Frame-Options: Set to DENY, this completely prevents my site from being embedded in an &lt;iframe&gt; on another website, which is the primary defense against &amp;quot;clickjacking&amp;quot; attacks.
Permissions-Policy: This is a modern header that lets me lock down browser features that my blog has no reason to use, like the microphone, camera, USB devices, and payment APIs.&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The Result&lt;/p&gt;
&lt;p&gt;The outcome is exactly what I was hoping for: a fast, modern blog with an A+ security rating that is completely decoupled from my main portfolio. The workflow is simple—I write a post in a Markdown file, push it to GitHub, and Netlify handles the rest. It’s a setup I can trust while I focus on writing content and my job search.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Case of the Persistent Contact Form: A Debugging Odyssey</title>
    <link href="https://blog.beaubremer.com/posts/2025-06-11-contact-form/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/2025-06-11-contact-form/</id>
    <content xml:lang="en" type="html">&lt;h1&gt;The Case of the Persistent Contact Form: A Debugging Odyssey&lt;/h1&gt;
&lt;p&gt;Hey tech enthusiasts and fellow web wranglers!&lt;/p&gt;
&lt;p&gt;Have you ever stared at a seemingly simple feature – like a contact form – and wondered why it&#39;s putting up such a fight? Well, I recently went on an epic debugging adventure with my own website&#39;s contact form, and let me tell you, it was a journey filled with unexpected twists, a few head-scratching moments, and ultimately, a satisfying victory.&lt;/p&gt;
&lt;p&gt;If you&#39;re currently wrestling with a stubborn form, a missing CAPTCHA, or email notifications that just won&#39;t trigger, you might find some solace (and hopefully some solutions!) in my tale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Initial Setup (Seemed Simple Enough!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My goal was straightforward: a clean, effective contact form on my personal site, protected by a CAPTCHA to ward off those pesky bots, and set up to send me an email whenever someone reached out. I opted for Netlify to host my static site, Cloudflare Turnstile for a user-friendly CAPTCHA, and Resend for reliable email delivery.&lt;/p&gt;
&lt;p&gt;The initial setup involved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crafting the HTML form.&lt;/li&gt;
&lt;li&gt;Writing a Netlify serverless function in JavaScript to handle the form submission, CAPTCHA verification, and email sending via Resend.&lt;/li&gt;
&lt;li&gt;Adding a sprinkle of client-side JavaScript for form validation and submission handling.&lt;/li&gt;
&lt;li&gt;Configuring environment variables in Netlify for API keys and secrets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds reasonable, right? That&#39;s what I thought too...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The First Signs of Trouble (and the Rabbit Hole)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Initially, the site looked great (thanks to Tailwind CSS and a cool Three.js background animation – another story for another time!). But the contact form? Radio silence. No CAPTCHA widget, and definitely no emails landing in my inbox.&lt;/p&gt;
&lt;p&gt;This is where the debugging adventure truly began. What followed was a deep dive into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Browser Developer Tools (My Best Friend!)&lt;/strong&gt;: Console logs became my daily bread, and network requests my guiding stars. We meticulously checked for JavaScript errors, failed API calls, and Content Security Policy violations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Netlify Deployment Logs&lt;/strong&gt;: Scrutinizing every stage of the build and deployment process became crucial to ensure our serverless function was being included correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare Turnstile Dashboard&lt;/strong&gt;: Double-checking site keys, secret keys, and even experimenting with different settings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resend Logs&lt;/strong&gt;: Monitoring email sending attempts to see if the requests were even reaching the service and what the responses were.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Headers (The Silent Guardians)&lt;/strong&gt;: We spent a surprising amount of time wrestling with the &lt;code&gt;netlify.toml&lt;/code&gt; file and its security headers, learning firsthand how a misconfigured policy can block essential resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment Variables (The Keepers of Secrets)&lt;/strong&gt;: Ensuring API keys were correctly stored and accessed by our Netlify function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branching and Deployment Contexts&lt;/strong&gt;: Briefly suspected we might be working on the wrong version of the site!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Learnings and Aha! Moments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Throughout this process, several key learnings emerged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Order Matters&lt;/strong&gt;: In our &lt;code&gt;index.html&lt;/code&gt;, the order in which scripts were loaded (especially Three.js and our main &lt;code&gt;script.js&lt;/code&gt;) had a significant impact on whether the page rendered correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security is Paramount (and Tricky!)&lt;/strong&gt;: Content Security Policy is a powerful tool, but it requires careful configuration to avoid unintentionally blocking legitimate resources like third-party CAPTCHA scripts and analytics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serverless Functions Can Be Elusive&lt;/strong&gt;: Debugging server-side code running in a cloud environment requires a different mindset than local development. Netlify&#39;s function logs and the ability to download deployed functions became invaluable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment Consistency is Key&lt;/strong&gt;: We encountered situations where local code wasn&#39;t making its way to the deployed site as expected, highlighting the importance of proper Git practices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Every Error Message is a Breadcrumb&lt;/strong&gt;: Even cryptic error messages in the browser console or network logs provide valuable clues if you know where to look and how to interpret them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Sweet Taste of Success (Finally!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After what felt like countless iterations, meticulous log analysis, and a few moments of pure frustration, we finally cracked the code! The issues ranged from a missing Three.js script tag, overly restrictive security policies, and even ensuring the correct version of our Netlify function was being deployed.&lt;/p&gt;
&lt;p&gt;The moment the CAPTCHA widget appeared, the form started submitting correctly, and those email notifications began landing in my inbox was incredibly rewarding.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips for Your Own Debugging Adventures&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re facing similar challenges with your contact form or website features, here are a few takeaways from my experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be Patient and Systematic&lt;/strong&gt;: Debugging often involves trial and error, but a systematic approach of checking logs, isolating variables, and making small, incremental changes is crucial.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leverage Your Browser&#39;s Developer Tools&lt;/strong&gt;: Become comfortable with the Console, Network, and Security tabs. They provide a wealth of information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read the Documentation (Carefully!)&lt;/strong&gt;: The documentation for services like Netlify, Cloudflare Turnstile, and Resend is your best friend. Pay close attention to configuration instructions and common troubleshooting steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&#39;t Be Afraid to Ask for Help&lt;/strong&gt;: Online communities and forums can be incredibly valuable resources when you&#39;re stuck. Clearly explaining your problem and what you&#39;ve tried so far will help others assist you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Celebrate the Small Victories&lt;/strong&gt;: Debugging can be mentally taxing. Acknowledge and celebrate each step forward, no matter how small.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Journey Continues...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While this particular debugging odyssey has reached its conclusion, the world of web development is constantly evolving. There will always be new challenges to overcome and new things to learn. And that, in itself, is part of the adventure.&lt;/p&gt;
</content>
  </entry>
</feed>
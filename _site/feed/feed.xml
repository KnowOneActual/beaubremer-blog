<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beau Bremer&#39;s | Blog</title>
  <subtitle>A collection of articles and thoughts on technology and project management.</subtitle>
  <link href="https://blog.beaubremer.com/feed/feed.xml" rel="self"/>
  <link href="https://blog.beaubremer.com/"/>
  <updated>2025-06-29T00:00:00Z</updated>
  <id>https://blog.beaubremer.com/</id>
  <author>
    <name>Beau Bremer</name>
    <email>support&amp;#64;beaubremer&amp;#46;com</email>
  </author>
  <entry>
    <title>From Ping to Fix: A Practical Guide to Basic Network Troubleshooting</title>
    <link href="https://blog.beaubremer.com/posts/From_Ping_to_Fix/"/>
    <updated>2025-06-29T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/From_Ping_to_Fix/</id>
    <content xml:lang="en" type="html">&lt;p&gt;It’s a familiar frustration: an application can&#39;t reach its server, your connection feels sluggish, or the internet just cuts out entirely.&lt;/p&gt;
&lt;p&gt;Before you spend hours searching forums or calling for help, you can often find the root of the problem yourself with just a few tools and a clear strategy.&lt;/p&gt;
&lt;p&gt;This guide will walk you through a practical approach to network troubleshooting. You&#39;ll learn about three essential commands, a five-step framework for thinking through any problem, and a smart strategy to make your guesswork less random.&lt;/p&gt;
&lt;h3&gt;Your Core Troubleshooting Toolkit&lt;/h3&gt;
&lt;p&gt;Think of these three commands as your first line of defense. They are simple, powerful, and give you a quick snapshot of the network&#39;s health.&lt;/p&gt;
&lt;h4&gt;1. &lt;code&gt;ping&lt;/code&gt;: Is Anyone Home?&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;ping&lt;/strong&gt; command is the simplest way to check if a remote device is online and reachable. It sends a small packet of data and waits for a reply.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Pinging a well-known Google server
ping 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What to look for:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Successful Replies:&lt;/strong&gt; If you see lines that include &lt;code&gt;bytes from... time=...&lt;/code&gt;, it means there&#39;s a live connection between you and the server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request Timed Out:&lt;/strong&gt; If you get &amp;quot;Request Timed Out&amp;quot; or &amp;quot;Destination Host Unreachable,&amp;quot; there&#39;s a problem somewhere between your device and the destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example of a successful ping:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: icmp_seq=0 ttl=116 time=13.523 ms
64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=14.128 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;2. &lt;code&gt;traceroute&lt;/code&gt;: What&#39;s the Path?&lt;/h4&gt;
&lt;p&gt;If &lt;code&gt;ping&lt;/code&gt; fails, &lt;code&gt;traceroute&lt;/code&gt; (or &lt;code&gt;tracert&lt;/code&gt; on Windows) is your next step. It shows you the specific path, or &lt;strong&gt;hops&lt;/strong&gt;, your data takes to get to a destination. This is perfect for spotting exactly where the connection breaks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Tracing the route to Google&#39;s server
traceroute 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll see a list of routers your connection passes through. If the trace stops, shows &lt;code&gt;* * *&lt;/code&gt; for multiple lines, or has a sudden, massive jump in latency (e.g., from &lt;code&gt;15ms&lt;/code&gt; to &lt;code&gt;200ms&lt;/code&gt;), you&#39;ve found a major clue about where the failure is occurring.&lt;/p&gt;
&lt;h4&gt;3. Port Checking: Is the Service Listening?&lt;/h4&gt;
&lt;p&gt;Sometimes the server is online (&lt;code&gt;ping&lt;/code&gt; works), but the specific service you need (like a database or a web server) isn&#39;t responding. You need to check if the &lt;strong&gt;port&lt;/strong&gt; for that service is open.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Windows (using PowerShell):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Checks if Google&#39;s web server is responding on the standard HTTPS port (443)
Test-NetConnection google.com -Port 443
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;On macOS or Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The -z flag tells nc to scan without sending data, v is for verbose
nc -zv google.com 443
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &amp;quot;success&amp;quot; or &amp;quot;open&amp;quot; message means the service is listening. A failure could point to a firewall blocking the connection or the service being down.&lt;/p&gt;
&lt;h3&gt;A Framework for Sanity: The 5-Step &amp;quot;Fixit&amp;quot; Process&lt;/h3&gt;
&lt;p&gt;Commands give you data, but a framework gives you a plan. This is a systematic way to diagnose and solve a problem without getting overwhelmed.&lt;/p&gt;
&lt;h4&gt;1. Find the Problem&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Clearly define what&#39;s actually failing. &amp;quot;Users can&#39;t log in&amp;quot; is far more useful than &amp;quot;the network is down.&amp;quot;&lt;/p&gt;
&lt;h4&gt;2. Inspect the Symptoms&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Look for patterns. Does it only happen at 9 AM? Is it only affecting one person, or is it everyone on the office Wi-Fi?&lt;/p&gt;
&lt;h4&gt;3. Exclude Possibilities&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Rule out what&#39;s working. If you can ping the server, you can probably exclude a full physical network outage.&lt;/p&gt;
&lt;h4&gt;4. Implement a Hypothesis&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Form a theory and test it. &amp;quot;I think the firewall is blocking the port.&amp;quot; Now, run your port check to verify.&lt;/p&gt;
&lt;h4&gt;5. Track the Fix&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Once you find the solution, write it down. This simple step saves you (and your future colleagues) from having to solve the same problem all over again.&lt;/p&gt;
&lt;p&gt;The key thing to remember is that this is a loop, not a straight line. If one hypothesis fails, you just form and test a new one until you find the root cause.&lt;/p&gt;
&lt;h3&gt;A Smarter Strategy: Thinking in Layers&lt;/h3&gt;
&lt;p&gt;So you have your commands and a process, but where do you even start looking? The trick is to think about the problem in layers—from the physical cables up to the software application itself. This strategy stops you from guessing randomly.&lt;/p&gt;
&lt;p&gt;Here are three common approaches based on this layered thinking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bottom-Up (Is it plugged in?):&lt;/strong&gt; Start at the physical layer. This is the way to go when everything is down. Begin by checking if the cables are plugged in and the Wi-Fi is on before you do anything else.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top-Down (Is it the app?):&lt;/strong&gt; Start at the application layer. This is best for when a single program is failing, like your email client. Begin by checking the app&#39;s settings and logs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Hybrid (Start in the Middle):&lt;/strong&gt; This is a powerful strategy for almost any situation. Start with a &lt;code&gt;ping&lt;/code&gt; command. If it works, you know the lower layers are fine, and you can look &amp;quot;up&amp;quot; toward the application. If it fails, you know the problem is &amp;quot;down&amp;quot; in the physical or network setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tying It All Together&lt;/h3&gt;
&lt;p&gt;Troubleshooting doesn&#39;t have to be a mystery. By combining the &lt;em&gt;what&lt;/em&gt; (your core commands), the &lt;em&gt;how&lt;/em&gt; (the Fixit framework), and the &lt;em&gt;where&lt;/em&gt; (the layered strategy), you have a complete system for tackling almost any network issue that comes your way. Now you’re equipped to stop guessing, start diagnosing problems methodically, and prove where the issue is—even if that means proving it&#39;s time to call for backup.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More Than a Portfolio: The Story Your Personal Site Tells About You</title>
    <link href="https://blog.beaubremer.com/posts/More_Than_a_Portfolio/"/>
    <updated>2025-06-27T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/More_Than_a_Portfolio/</id>
    <content xml:lang="en" type="html">&lt;p&gt;For a long time, I had put off creating a personal website. I already had a resume and a LinkedIn profile—the professional basics. Building a whole site felt like a ton of work for something few people might ever see. Was the effort really worth it?&lt;/p&gt;
&lt;p&gt;I’ve come to realize the answer is a definite &#39;yes,&#39; but not for the reasons I expected. The real value isn’t just in the finished product. The most powerful message your site sends has nothing to do with the portfolio pieces it hosts or the articles it contains. It’s about what the simple act of building it says about you.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;It Shows You&#39;re Willing to Figure Things Out&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Unless you&#39;re a web developer, building a site means stepping into the unknown. I remember the specific, slightly delirious victory of figuring out what a &#39;serverless function&#39; was—a piece of technical jargon that sounds like it was invented just to make you quit. For a moment there, I felt like I could probably hack the mainframe.&lt;/p&gt;
&lt;p&gt;That process is a perfect, small-scale prototype of professional problem-solving. It shows a curiosity and a willingness to learn—the exact traits that are valuable in any role where the tools are constantly changing.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Perfection Isn&#39;t the Point&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here’s the most freeing part: your personal site doesn’t have to be a technical masterpiece. My own site&#39;s design philosophy could best be described as &amp;quot;the buttons work,&amp;quot; and that&#39;s okay. It&#39;s not about proving you can code like a pro; it&#39;s about proving you won&#39;t let a skill gap stop you from getting something done.&lt;/p&gt;
&lt;p&gt;The belief that we need to be an expert before we start is the biggest thing that holds us back. It’s perfectionism disguised as prudence. Initiative isn&#39;t about having all the answers before you begin; it&#39;s about being resourceful enough to find them along the way.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;You Prove You Can Follow Through&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Launching a website is the exciting part. Maintaining it is where dedication comes in.&lt;/p&gt;
&lt;p&gt;Think about it this way: when a customer walks into a messy, disorganized garage, they can lose their confidence. When they walk into a clean, well-lit shop, they feel like they&#39;re in good hands. Your website is your digital storefront, and it sends the same signal.&lt;/p&gt;
&lt;p&gt;Adding a new project, writing a short post, or just updating your bio shows consistency. It demonstrates that you don’t just start things; you see them through and take pride in your work over the long term. A hiring manager who sees a site with recent activity recognizes a person who can own a project beyond day one, just as a customer trusts a mechanic who keeps their shop in order.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;It Signals a Builder&#39;s Mindset&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Ultimately, all these points lead to a fundamental difference between a perfectionist&#39;s mindset and a builder&#39;s mindset. A perfectionist waits for the perfect tools, the perfect idea, and the perfect time. A builder starts with what they have and makes something.&lt;/p&gt;
&lt;p&gt;Your website is the perfect evidence of that builder&#39;s mindset in action. &lt;strong&gt;Think of it as a working prototype of you as a professional.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The value of a prototype isn’t in its flawless design or exhaustive features; its value lies in the fact that it &lt;em&gt;exists&lt;/em&gt;. It proves that an idea can be brought to life. It shows you can execute and that you understand the crucial concept that &amp;quot;done&amp;quot; is better than &amp;quot;perfect.&amp;quot;&lt;/p&gt;
&lt;p&gt;The question is simple: who would we rather have on our team? The person who is still polishing a theoretical plan, or the person who has already built and shipped a working solution?&lt;/p&gt;
&lt;p&gt;Your website answers that question before you even say a word. In the end, it’s more than a link in your signature—it’s your story of how you get things done.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>WireShark to the Rescue: Unmasking Unlabeled Network Ports with CDP, LLDP, and More!</title>
    <link href="https://blog.beaubremer.com/posts/WireShark_to_the_Rescue_LLDP/"/>
    <updated>2025-06-26T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/WireShark_to_the_Rescue_LLDP/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;Lost in the Labyrinth of Unlabeled Ports and Ethernet Cables? Wireshark to the Rescue!&lt;/h3&gt;
&lt;p&gt;Hey everyone! Ever found yourself staring at a rack full of network switches, all blinking enticingly, but with not a single label in sight? You&#39;re not alone. We&#39;ve all been there – needing to track down a specific port, dreading the inevitable &#39;walk of shame&#39; back to the rack room, eyes glazing over at a sea of identical blinking lights, trying to track down a rogue cable. Imagine if you could just ask the network where you are!&lt;/p&gt;
&lt;p&gt;Good news! You actually can. It involves your trusty laptop and the magic of Wireshark. Today, we&#39;re going to dive into some network discovery protocols that can be your best friends when you&#39;re playing &#39;find the port&#39; in the data room.&lt;/p&gt;
&lt;h3&gt;Meet the Network Detectives: CDP, LLDP, EDP, and FDP&lt;/h3&gt;
&lt;p&gt;When I need to figure out what port I&#39;m plugged into, I turn to these four unsung heroes of network discovery. Each one acts like a little beacon, broadcasting information about the device it&#39;s connected to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDP (Cisco Discovery Protocol):&lt;/strong&gt; If you&#39;re working with Cisco gear, CDP is your go-to. It&#39;s a proprietary protocol that Cisco devices use to share information about themselves directly with other Cisco devices connected to them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LLDP (Link Layer Discovery Protocol):&lt;/strong&gt; This is the open standard version of CDP. It works across various vendors, making it incredibly useful in mixed-vendor environments. LLDP is like the universal translator of network discovery.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EDP (Extreme Discovery Protocol):&lt;/strong&gt; As the name suggests, this protocol is designed for Extreme Networks equipment. Similar to CDP, it&#39;s Extreme&#39;s way of sharing information between its devices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDP (Foundry Discovery Protocol):&lt;/strong&gt; If you&#39;re dealing with Brocade (formerly Foundry Networks) switches, FDP is what you&#39;ll need to look for—another proprietary protocol, but just as helpful in its ecosystem. This is not a common one, but I&#39;ve run it enough that it&#39;s on my list.
My personal favorite, and the one I reach for most often, is &lt;strong&gt;LLDP&lt;/strong&gt;. Why LLDP, you ask? Because in today&#39;s networks, you&#39;re rarely dealing with just one vendor. LLDP gives me the best chance of getting the information I need, no matter whose hardware I&#39;m connected to. It&#39;s the most versatile tool in the box!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to Use These Filters in Wireshark&lt;/h3&gt;
&lt;p&gt;Okay, so you&#39;ve got Wireshark open, you&#39;re capturing traffic, but how do you find these little network gems? It&#39;s super simple! Wireshark has a powerful display filter bar that lets you narrow down what you&#39;re seeing.&lt;/p&gt;
&lt;p&gt;Here&#39;s how to apply each filter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For CDP: Type &lt;code&gt;cdp&lt;/code&gt; in the display filter bar and hit Enter.&lt;/li&gt;
&lt;li&gt;For LLDP: Type &lt;code&gt;lldp&lt;/code&gt; in the display filter bar and hit Enter.&lt;/li&gt;
&lt;li&gt;For EDP: Type &lt;code&gt;edp&lt;/code&gt; in the display filter bar and hit Enter.&lt;/li&gt;
&lt;li&gt;For FDP: Type &lt;code&gt;fdp&lt;/code&gt; in the display filter bar and hit Enter.&lt;/li&gt;
&lt;li&gt;For all: Type &lt;code&gt;cdp or lldp or edp or fdp&lt;/code&gt; in the display filter bar and hit Enter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you apply the filter, you&#39;ll start seeing packets specifically from that protocol. These protocols are designed to periodically broadcast information, so you might need to wait a few seconds for a packet to appear. In these packets, you&#39;ll often find information such as the remote device&#39;s hostname, its IP address, and, most importantly, the remote port it&#39;s connected to. This is gold when you&#39;re trying to figure out which port on that unlabeled switch you&#39;re connected to. This might take one minute or so to show, depending on the switch and message frequency.&lt;/p&gt;
&lt;h3&gt;Example Output of an LLDP Packet:&lt;/h3&gt;
&lt;p&gt;Let&#39;s take a look at what an LLDP packet might reveal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Frame 1: 242 bytes on wire (1936 bits), 242 bytes captured (1936 bits) on interface en7, id 0

Ethernet II, Src: Ubiquiti&#92;_XX:XX:XX (68:d7:9a:XX:XX:XX), Dst: LLDP&#92;_Multicast (01:80:c2:00:00:0e)

Link Layer Discovery Protocol

Chassis Subtype = Locally assigned, Id: 68:d7:9a:XX:XX:XX

Port Subtype = MAC address, Id: 68:d7:9a:XX:XX:XX

Time To Live = 120 sec

System Name = Switch_room102_0012

System Description = Debian GNU/Linux 11 (bullseye) Linux 4.19.152-ui-alpine &#92;#4.19.152 SMP Fri Jun 7 23:26:35 CST 2024 aarch64

Capabilities

Management Address

Management Address

Port Description = eth21

IEEE 802.3 - Link Aggregation

IEEE 802.3 - MAC/PHY Configuration/Status

End of LLDPDU

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Saving Your Favorite Filters&lt;/h3&gt;
&lt;p&gt;Tired of remembering &lt;code&gt;lldp&lt;/code&gt; every time? Wireshark lets you save your favorite filters so they&#39;re just a click away!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Type your filter&lt;/strong&gt; (e.g., &lt;code&gt;lldp&lt;/code&gt;) into the display filter bar.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;plus sign (+)&lt;/strong&gt; next to the display filter bar.&lt;/li&gt;
&lt;li&gt;A small dialog box will pop up. Give your filter a descriptive &lt;strong&gt;label&lt;/strong&gt; (such as &amp;quot;LLDP Packets&amp;quot;) and, optionally, add a &lt;strong&gt;comment&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, your saved filter will appear in the drop-down menu next to the display filter bar. No more typing, just quick access to your most used network sleuth tools!&lt;/p&gt;
&lt;p&gt;So, the next time you&#39;re faced with a wall of unlabeled ports, don&#39;t despair! Fire up Wireshark, apply your favorite discovery protocol filter (I&#39;m looking at you, LLDP!), and let the network tell you exactly where you&#39;re plugged in. It&#39;s a huge time saver and a great way to avoid that awkward &amp;quot;guess and check&amp;quot; dance.&lt;/p&gt;
&lt;h4&gt;Capture Smarter, Not Harder!&lt;/h4&gt;
</content>
  </entry>
  <entry>
    <title>Building a Better Toolbox: A Simple IP Planner for Live Events</title>
    <link href="https://blog.beaubremer.com/posts/Simple_IP_Planner/"/>
    <updated>2025-06-22T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Simple_IP_Planner/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Anyone who has set up a network for a show knows the routine. You start with a list—maybe on a notepad, maybe in a spreadsheet—of all the gear that needs an IP address. The audio console, the lighting desk, the stage rack, the video switcher, the RF scanner, the system processor... the list goes on. It’s not just about avoiding conflicts; it&#39;s about creating a logical, easy-to-troubleshoot system.&lt;/p&gt;
&lt;p&gt;While there are plenty of powerful subnet calculators online, I&#39;ve always found they&#39;re either too complex for a quick on-site check or too generic. They&#39;ll give you the network range and broadcast address, but they won&#39;t help you map that ULX-D Rack to .101 and the DiGiCo SD12 to .50.&lt;/p&gt;
&lt;p&gt;That gap is what led to my latest little project: the &lt;strong&gt;AV IP Subnet Calculator&lt;/strong&gt;. It was a quick build, but it solves a specific problem: it’s a simple utility for live event technicians to plan out IP addresses for their gear quickly.&lt;/p&gt;
&lt;h4&gt;More Than a Calculator, It&#39;s a Planner&lt;/h4&gt;
&lt;p&gt;The goal wasn&#39;t just to crunch the numbers on a CIDR range. The goal was to create a usable plan. The tool has two main parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Calculator:&lt;/strong&gt; You plug in a starting IP address and a subnet size (using a slider or a number input), and it immediately displays the key information: network address, broadcast address, usable host range, and the total number of available hosts. No fluff, just the facts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Device Planner:&lt;/strong&gt; This is where it becomes an &lt;em&gt;AV&lt;/em&gt; tool. Below the calculator, you can list out your equipment. Name a device (e.g., &amp;quot;Midas m32&amp;quot;), say how many IP addresses it needs, and click &amp;quot;Add.&amp;quot; The tool instantly assigns it the next available IP address from the range you defined.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can continue this for all your gear, and in seconds, you have a clean, ordered list of your entire show network. It&#39;s the digital version of that piece of paper you were going to use anyway, but it&#39;s faster and less prone to typos. When you&#39;re done, a &amp;quot;Copy List&amp;quot; button formats the whole plan so you can paste it into your show documentation.&lt;/p&gt;
&lt;h4&gt;The Tech Behind It: Keeping It Simple&lt;/h4&gt;
&lt;p&gt;For a tool like this, speed and simplicity are key. It needs to load instantly on a phone or a laptop with spotty backstage Wi-Fi. That&#39;s why I built it as a single, self-contained HTML file with no complex frameworks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTML:&lt;/strong&gt; The foundation is a straightforward HTML structure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS:&lt;/strong&gt; For styling, I pulled in Tailwind via its CDN. This allows you to build a clean, modern UI with utility classes directly in the HTML, which is ideal for small projects where you don&#39;t want a separate stylesheet or a build step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vanilla JavaScript:&lt;/strong&gt; All the logic is handled by plain JavaScript, running right in the browser. No dependencies, no frameworks. This keeps the app incredibly lightweight.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The core of the calculator involves a bit of bitwise manipulation to handle the IP addresses. JavaScript doesn&#39;t have native IP address functions so that you can convert the familiar 192.168.1.100 format into a 32-bit integer. This makes all the subnet math much easier.&lt;/p&gt;
&lt;p&gt;Here’s a peek at the helper functions that do the conversion:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
const ipToLong = (ip) =&amp;gt; { &#92;
  return ip.split(&#39;.&#39;).reduce((acc, octet) =&amp;gt; (acc &amp;amp;lt;&amp;lt; 8) + parseInt(octet, 10), 0) &amp;gt;&amp;gt;&amp;gt; 0; &#92;
}; &#92;
 &#92;
const longToIp = (long) =&amp;gt; { &#92;
  return [(long &amp;gt;&amp;gt;&amp;gt; 24), (long &amp;gt;&amp;gt;&amp;gt; 16) &amp;amp; 255, (long &amp;gt;&amp;gt;&amp;gt; 8) &amp;amp; 255, long &amp;amp; 255].join(&#39;.&#39;); &#92;
}; &#92;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the IPs are numbers, calculating the network and broadcast addresses is straightforward. The rest of the code listens for user input, runs the calculations, and updates the display in real-time.&lt;/p&gt;
&lt;h4&gt;A Tool That Works&lt;/h4&gt;
&lt;p&gt;This wasn&#39;t a project that required weeks of development, and that&#39;s the point. It was about identifying a small, recurring friction point in a workflow and building a sharp, simple tool to solve it. It&#39;s a perfect example of how a little bit of code can go a long way in our industry.&lt;/p&gt;
&lt;p&gt;You can check out https://beaubremer.com/ip_subnet_calculator. I hope you find it as helpful.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Oh No, Vim! Your Emergency Kit for Getting Unstuck</title>
    <link href="https://blog.beaubremer.com/posts/Oh_No_Vim/"/>
    <updated>2025-06-21T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Oh_No_Vim/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;You’ve been there. You&#39;re in your terminal, you proudly type &lt;code&gt;git commit&lt;/code&gt;,&lt;/h3&gt;
&lt;p&gt;hit Enter, and… what is this?&lt;/p&gt;
&lt;p&gt;The screen changes, and your cursor is blinking,
but typing text does nothing, and every key you press just beeps or moves
things around in weird ways.&lt;/p&gt;
&lt;p&gt;Congratulations, you&#39;ve accidentally stumbled into Vim, the powerful but
notoriously tricky text editor.&lt;/p&gt;
&lt;p&gt;Don&#39;t panic! You don&#39;t need to learn Vim today. You just need to know how
to get out. Here is your emergency kit.&lt;/p&gt;
&lt;h3&gt;The Emergency Kit: How to Exit Vim&lt;/h3&gt;
&lt;p&gt;Follow these steps exactly. Vim has two main modes: &lt;strong&gt;Command mode&lt;/strong&gt; (where
you enter commands) and &lt;strong&gt;Insert mode&lt;/strong&gt; (where you type). You start in
Command mode.&lt;/p&gt;
&lt;h4&gt;1. Enter &amp;quot;Insert Mode&amp;quot; to Type&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What to do:&lt;/strong&gt; Press the &lt;code&gt;i&lt;/code&gt; key once.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What it does:&lt;/strong&gt; This puts you into &lt;strong&gt;I&lt;/strong&gt;nsert mode. You should see
&lt;code&gt;-- INSERT --&lt;/code&gt; at the bottom of the screen. Now you can type or edit your
commit message like you&#39;d expect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Make Your Edits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What to do:&lt;/strong&gt; Type your commit message. If you don&#39;t need to change
anything, you can skip this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Exit &amp;quot;Insert Mode&amp;quot;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What to do:&lt;/strong&gt; Press the &lt;code&gt;Esc&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What it does:&lt;/strong&gt; This takes you back to &lt;strong&gt;Command mode&lt;/strong&gt;. The &lt;code&gt;-- INSERT --&lt;/code&gt;
text at the bottom will disappear. This is where you can tell Vim what to
do next.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. Save and Quit (The Most Common Exit)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What to do:&lt;/strong&gt; Type &lt;code&gt;:wq&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What it does:&lt;/strong&gt; This is two commands: &lt;code&gt;:w&lt;/code&gt; (write, i.e., save the
file) and &lt;code&gt;:q&lt;/code&gt; (quit). You&#39;ve successfully saved your commit message and
exited Vim.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Emergency Hatch: Quit Without Saving&lt;/h3&gt;
&lt;p&gt;What if you made a mess and just want to start over?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What to do:&lt;/strong&gt; After pressing &lt;code&gt;Esc&lt;/code&gt; to get to Command mode, type &lt;code&gt;:q!&lt;/code&gt;
and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What it does:&lt;/strong&gt; The &lt;code&gt;:q!&lt;/code&gt; command means &lt;strong&gt;q&lt;/strong&gt;uit without saving (the &lt;code&gt;!&lt;/code&gt;
forces the action). Git will abort the commit, and you can run
&lt;code&gt;git commit&lt;/code&gt; again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What Now? Your Two Paths Forward&lt;/h3&gt;
&lt;p&gt;Now that you&#39;ve survived, you have two choices for the next time this happens.&lt;/p&gt;
&lt;h4&gt;Path 1: Tame the Beast&lt;/h4&gt;
&lt;p&gt;You don&#39;t have to become a Vim master, but knowing one more command can be
handy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Command Mode (press &lt;code&gt;Esc&lt;/code&gt;), type &lt;code&gt;u&lt;/code&gt; to &lt;strong&gt;u&lt;/strong&gt;ndo your last change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Path 2: Avoid the Beast Entirely&lt;/h4&gt;
&lt;p&gt;If you&#39;d rather use an editor you already know, you can tell Git to use
something else. For example, to set VS Code as your default editor, run
this command in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git config --global core.editor &amp;quot;code --wait&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope that helped out a bit!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>From Idea to AI: Building (and Securing) a Conversational Weather Bot</title>
    <link href="https://blog.beaubremer.com/posts/Idea_to_AI/"/>
    <updated>2025-06-21T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Idea_to_AI/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Every developer gets that itch—the need for a portfolio project that&#39;s more than just another to-do list. I wanted to build something that felt real, something that would force me to solve the kind of problems that don&#39;t come up in a simple tutorial. That&#39;s how I landed on the idea of a conversational weather bot.&lt;/p&gt;
&lt;p&gt;My plan wasn&#39;t to execute a perfect blueprint. It was to start with a concept and embrace the real-world process of building, debugging, and learning along the way.&lt;/p&gt;
&lt;h3&gt;The Toolkit: Choosing the Right Tools&lt;/h3&gt;
&lt;p&gt;My goal was a modern, intelligent, and secure application. Instead of chasing the newest, flashiest tools, my plan was to pick a tech stack where every component solved a specific problem for &lt;em&gt;this&lt;/em&gt; project. Here’s a look at the tools I decided on, and my thinking behind each one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Frontend:&lt;/strong&gt; Plain HTML, JavaScript, and Tailwind CSS. I kept the frontend lightweight, flexible, and fast, avoiding framework overhead for what was a clean and simple UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intelligence:&lt;/strong&gt; The &lt;a href=&quot;https://ai.google.dev/&quot;&gt;Gemini API&lt;/a&gt; from Google. Its strength in natural language processing was perfect for turning a user&#39;s informal question into actionable data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Live Data:&lt;/strong&gt; The &lt;a href=&quot;https://openweathermap.org/api&quot;&gt;OpenWeatherMap API&lt;/a&gt;. A reliable and straightforward source for real-time, structured weather data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database:&lt;/strong&gt; &lt;a href=&quot;https://firebase.google.com/docs/firestore&quot;&gt;Google Firestore&lt;/a&gt;. I needed a simple way to save conversation history, and Firestore&#39;s real-time capabilities and easy setup were ideal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hosting &amp;amp; Backend:&lt;/strong&gt; &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. I opted for a &lt;strong&gt;serverless&lt;/strong&gt; approach for several key reasons:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cost-Effective:&lt;/strong&gt; You only pay for what you use, avoiding the cost of an always-on server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic Scaling:&lt;/strong&gt; This approach provides automatic scaling. It’s about thinking ahead and building in a way that &lt;em&gt;could&lt;/em&gt; handle a sudden spike in traffic without any manual work—a crucial feature for any real-world product.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Security:&lt;/strong&gt; It provides a secure environment for secret API keys without server management overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Part 1: From Zero to a Working Prototype&lt;/h3&gt;
&lt;p&gt;The first step was a rapid prototype to get a minimum viable product working. I built the chat interface using simple HTML and styled it with Tailwind CSS. The initial logic was straightforward and all lived in a single client-side JavaScript file.&lt;/p&gt;
&lt;p&gt;While this was great for proving the concept, it had a critical security flaw that I knew I&#39;d need to address after getting the basic functionality running.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Part 2: The Real-World Hurdles (and &#39;Aha!&#39; Moments)&lt;/h3&gt;
&lt;p&gt;Getting the prototype off my local machine and onto a live website is where the real problem-solving began.&lt;/p&gt;
&lt;h4&gt;Debugging Challenge #1: The Silence of a Deployed App&lt;/h4&gt;
&lt;p&gt;The app worked perfectly on my machine, but when I deployed it, it was stuck on &amp;quot;Connecting...&amp;quot; My first instinct was to hunt for a typo, but the browser console was completely clean. That’s the moment every developer dreads! It led me to my first educated guess: the problem wasn&#39;t in the code itself, but in the difference between my local setup and the live production environment. And I was right—I had forgotten to configure the production Firebase project.&lt;/p&gt;
&lt;h4&gt;Debugging Challenge #2: The App Blocked Itself&lt;/h4&gt;
&lt;p&gt;Getting the database connected felt like a win, but it immediately unlocked a new set of errors. At first, they were confusing—a &amp;quot;&lt;strong&gt;Content Security Policy&lt;/strong&gt;&amp;quot; block and an &amp;quot;&lt;strong&gt;auth/admin-restricted-operation&lt;/strong&gt;&amp;quot; error. After some digging, I realized what was happening: my app was now so secure, it was blocking &lt;em&gt;itself&lt;/em&gt; from talking to the database! The solution was to explicitly allow the connection in my Netlify settings and enable anonymous sign-in in Firebase so visitors could have a secure session.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Part 3: The Pro-Level Step: Securing API Keys&lt;/h3&gt;
&lt;p&gt;The most critical issue remained: my API keys for Gemini and OpenWeatherMap were sitting in my public JavaScript file.&lt;/p&gt;
&lt;p&gt;To explain why this is a major security flaw, here&#39;s an analogy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Leaving API keys in your client-side code is like leaving the key to your office under the front doormat. It’s convenient, but anyone who knows where to look can get in and cause serious damage.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only acceptable solution was to refactor the architecture, introducing a &lt;strong&gt;serverless function&lt;/strong&gt; to act as a secure proxy.&lt;/p&gt;
&lt;p&gt;[Gemini API (Key Exposed!)] &amp;amp; [OpenWeatherMap API (Key Exposed!)] --&amp;gt;
[Netlify Function] ---&amp;gt; [Gemini API (Key Secure)] &amp;amp; [OpenWeatherMap API (Key Secure)] --&amp;gt;&lt;/p&gt;
&lt;p&gt;I created a Netlify Function that is the only part of the system that can access the secret keys.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
// netlify/functions/weather.js

// Using node-fetch for making API calls in the Node.js environment
const fetch = require(&#39;node-fetch&#39;);

exports.handler = async function (event) {
  // Best practice: Ensure the function only responds to POST requests.
  if (event.httpMethod !== &#39;POST&#39;) {
    return { statusCode: 405, body: &#39;Method Not Allowed&#39; };
  }

  try {
    const { userQuery } = JSON.parse(event.body);

    // API keys are pulled from Netlify&#39;s secure environment variables.
    // They are never exposed to the user&#39;s browser.
    const { WEATHER_API_KEY, GEMINI_API_KEY } = process.env;

    // ... (Secure logic to call Gemini and OpenWeatherMap APIs) ...

    const botResponse = await getConversationalReply(userQuery);

    return {
      statusCode: 200,
      body: JSON.stringify({ reply: botResponse }),
    };

  } catch (error) {
    // It&#39;s good practice to log errors for easier debugging.
    console.error(&amp;quot;Netlify Function Error:&amp;quot;, error);
    return { statusCode: 500, body: JSON.stringify({ error: &#39;An internal server error occurred.&#39; }) };
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This serverless architecture completely mitigates the risk of exposing API keys while maintaining the exact same user experience.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Final Result and Key Takeaways&lt;/h3&gt;
&lt;p&gt;Most importantly, this project was a reminder that you don&#39;t need to have all the answers before you start. The most valuable skills I used weren&#39;t from a perfect plan, but from the process of hitting a wall, making an educated guess, and figuring out the next right step. That&#39;s the real work of building things, and I hope this story encourages you to start your own project, even if you don&#39;t know exactly how it&#39;ll finish.&lt;/p&gt;
&lt;p&gt;If you want to dive into the code yourself, you can find the complete project on my GitHub.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Good, The Bad, and The Markdown</title>
    <link href="https://blog.beaubremer.com/posts/Good_The_Bad_and_Markdown/"/>
    <updated>2025-06-20T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Good_The_Bad_and_Markdown/</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you&#39;ve ever written a &lt;code&gt;README.md&lt;/code&gt; file on GitHub, commented on Reddit,
or used a static site generator (like Eleventy, which powers this blog),
you&#39;ve used Markdown. It&#39;s the simple, plain-text syntax that has quietly
become the standard for writing on the web.&lt;/p&gt;
&lt;p&gt;But like any tool, it has its strengths and weaknesses. In this post, we&#39;ll
take a practical look at the pros and cons of using Markdown, some common
mistakes to watch out for, and a few tips to help you write it effectively.&lt;/p&gt;
&lt;h3&gt;The Pros: Why Markdown is Great&lt;/h3&gt;
&lt;p&gt;Markdown&#39;s popularity isn&#39;t an accident. It offers several key advantages,
especially for technical writers and bloggers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It&#39;s Simple and Readable&lt;/strong&gt;: The core design goal of Markdown is to be as
readable as possible, even in its raw, plain-text form. You don&#39;t need
to be a developer to understand what &lt;code&gt;**bold**&lt;/code&gt; or &lt;code&gt;*italic*&lt;/code&gt; means.
This low learning curve means you can focus on the content, not the
formatting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&#39;s Platform-Independent&lt;/strong&gt;: A Markdown file is just a plain text file.
You can open and edit it on any device or operating system with any text
editor. This prevents your content from being locked into a proprietary
format, like a &lt;code&gt;.docx&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&#39;s Version Control-Friendly&lt;/strong&gt;: Because it&#39;s just text, Markdown works
beautifully with version control systems like Git. You can track changes,
compare versions, and collaborate with others on documents just like you
would with source code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&#39;s Fast&lt;/strong&gt;: With no buttons to click or menus to navigate, your hands
never have to leave the keyboard. This creates a faster, more streamlined
writing workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Cons: Where Markdown Falls Short&lt;/h3&gt;
&lt;p&gt;Despite its benefits, Markdown isn&#39;t perfect, and it&#39;s important to
understand its limitations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lack of Standardization&lt;/strong&gt;: This is Markdown&#39;s biggest drawback. There is
no single, official standard, which has led to dozens of &amp;quot;flavors&amp;quot; like
GitHub-Flavored Markdown (GFM), CommonMark, and others. A feature that
works in one place might not work in another, causing frustration
inconsistencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limited Features&lt;/strong&gt;: Markdown was designed for simplicity, which means it
lacks features for creating complex layouts. Things like tables,
footnotes, and diagrams are not part of the original spec and are
handled differently (or not at all) across flavors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Built-in Styling&lt;/strong&gt;: By design, Markdown separates content from
presentation. This is a good thing, but it means you can&#39;t control the
fine details of your document&#39;s appearance (like fonts, colors, or page
layout) from the Markdown file itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Common Mistakes to Avoid&lt;/h3&gt;
&lt;p&gt;Most &amp;quot;errors&amp;quot; in Markdown come from minor syntax slip-ups. Here are a few
to watch for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Forgetting Blank Lines&lt;/strong&gt;: Markdown uses blank lines to separate distinct
blocks of content, like paragraphs, lists, or code blocks. Forgetting
to add an empty line between them is one of the most common mistakes
and can cause things to render incorrectly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broken Links and Images&lt;/strong&gt;: The syntax &lt;code&gt;[text](url)&lt;/code&gt; is simple, but it&#39;s
easy to mix up the brackets and parentheses or use a broken URL. Always
double-check your links.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unformatted Code Blocks&lt;/strong&gt;: To get proper syntax highlighting, you need to
add a language identifier after the opening backticks (e.g.,
&lt;code&gt;```javascript&lt;/code&gt;). Forgetting this will usually result in plain,
uncolored text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent List Indentation&lt;/strong&gt;: When creating nested lists, you must
indent correctly (usually by four spaces). Inconsistent indentation can
break the list&#39;s structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tips for Better Markdown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use a Linter&lt;/strong&gt;: Tools like &lt;code&gt;markdownlint&lt;/code&gt; can automatically check your
files for common errors and enforce a consistent style. This is a
lifesaver, especially when collaborating with others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn Your &amp;quot;Flavor&amp;quot;&lt;/strong&gt;: Since you&#39;re likely writing for a specific
platform (like a blog, GitHub, or a particular app), take a few minutes
to learn the specifics of its Markdown flavor. This will help you take
full advantage of its features and avoid surprises.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep Tables Simple&lt;/strong&gt;: While many Markdown flavors support tables, they
can be challenging to write and maintain in plain text. For complex data,
consider whether a simple list or even an image of a table might be a
better option.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use HTML When Necessary&lt;/strong&gt;: Remember, Markdown is a superset of HTML. For
those rare cases where you absolutely need a feature that Markdown doesn&#39;t
offer, you can almost always fall back on raw HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown is a powerful tool that strikes a great balance between simplicity
and functionality. By understanding its pros, cons, and common quirks, you
can make it a seamless part of your writing workflow.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Definitive Guide to a Stable Sonos and Eero Network</title>
    <link href="https://blog.beaubremer.com/posts/Eero_Sonos_config/"/>
    <updated>2025-06-19T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Eero_Sonos_config/</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you&#39;ve invested in a Sonos sound system and an Eero mesh Wi-Fi network, you were probably expecting a seamless, high-end experience. Instead, you might be pulling your hair out dealing with intermittent audio dropouts, speakers that randomly disappear from the app, or music that refuses to play in grouped rooms.&lt;/p&gt;
&lt;p&gt;You&#39;re not alone, and the good news is your gear isn&#39;t faulty. While Sonos and Eero are officially compatible, they don&#39;t always play nicely without some specific configuration. The problem isn&#39;t a fundamental flaw, but a conflict between two sophisticated mesh systems that can be solved.&lt;/p&gt;
&lt;p&gt;This guide will walk you through the solutions, from foundational fixes that address 90% of issues to advanced tweaks for complex setups. Let&#39;s get your system running reliably.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Start Here: The 4 Non-Negotiable Rules for Stability&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Before you do anything else, you need to establish a solid foundation for your network. These four steps address the most common and disruptive sources of conflict.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eliminate Double NAT (The #1 Culprit):&lt;/strong&gt; Most issues where the Sonos app can&#39;t find your system are caused by &amp;quot;Double NAT.&amp;quot; This happens when your ISP&#39;s modem/router and your Eero system are both trying to manage your network.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Fix:&lt;/strong&gt; Log into your ISP&#39;s modem/router and enable &lt;strong&gt;&amp;quot;Bridge Mode.&amp;quot;&lt;/strong&gt; This turns off its routing functions and lets your Eero act as the single, true router for your home. This creates a &amp;quot;flat&amp;quot; network where all your devices can see each other properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reserve IP Addresses:&lt;/strong&gt; Your router assigns temporary (&amp;quot;dynamic&amp;quot;) IP addresses to your devices. If these change, your Sonos app can lose track of a speaker.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Fix:&lt;/strong&gt; In the Eero app, go to each of your Sonos devices and set a &lt;strong&gt;&amp;quot;DHCP Reservation&amp;quot;&lt;/strong&gt; or &lt;strong&gt;&amp;quot;Reserve IP.&amp;quot;&lt;/strong&gt; This makes its IP address permanent, eliminating a common cause of disappearing speakers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disable Eero Labs:&lt;/strong&gt; The experimental features in &amp;quot;Eero Labs&amp;quot; can be unstable and are known to cause conflicts with Sonos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Fix:&lt;/strong&gt; In the Eero app, navigate to &lt;code&gt;Discover &amp;gt; Eero Labs&lt;/code&gt; and &lt;strong&gt;turn off everything&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Obey the &amp;quot;Golden Rule&amp;quot; of Wiring:&lt;/strong&gt; If you connect more than one Sonos product to your network with an Ethernet cable, they &lt;strong&gt;must&lt;/strong&gt; all connect back to the &lt;em&gt;same&lt;/em&gt; Eero node or the &lt;em&gt;same&lt;/em&gt; network switch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Never wire Sonos products into different satellite Eero nodes. This can create a &amp;quot;broadcast storm&amp;quot; that crashes your entire network.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;The Great Debate: Eero Wi-Fi (WM:1) vs. SonosNet (WM:0)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;After setting the foundation, you face a core choice: should your Sonos speakers connect directly to your Eero Wi-Fi, or should they use Sonos&#39;s own mesh network, SonosNet? You can see which mode your system is in by checking the &amp;quot;About My System&amp;quot; section of the Sonos app. &lt;code&gt;WM:1&lt;/code&gt; is Wi-Fi, &lt;code&gt;WM:0&lt;/code&gt; is SonosNet.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Case for Eero Wi-Fi (WM:1 - The Modern Approach)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This is the default, all-wireless setup, where every Sonos speaker connects to your Eero network, just like a laptop or phone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why use it?&lt;/strong&gt; Modern Eero systems (especially Wi-Fi 6/6E) are incredibly fast and efficient, potentially offering better performance than the older SonosNet protocol. This is also the &lt;em&gt;only&lt;/em&gt; way to connect modern speakers like the Roam, Move, and the Era series.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best for:&lt;/strong&gt; Users with new Eero and Sonos hardware in homes with low Wi-Fi congestion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Case for SonosNet (WM:0 - The Classic Fix)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This setup is created by connecting &lt;strong&gt;one&lt;/strong&gt; Sonos product to your gateway Eero with an Ethernet cable. This device then creates a separate, private 2.4GHz wireless network exclusively for your other Sonos speakers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why use it?&lt;/strong&gt; SonosNet isolates your sensitive audio traffic from all the other Wi-Fi noise in your house. It&#39;s the most proven and effective fix for dropouts and issues with grouped speakers, especially in busy network environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best for:&lt;/strong&gt; Users with older hardware, high Wi-Fi interference, or anyone experiencing stubborn dropouts and stereo pair failures.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Feature&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;SonosNet (Wired Setup - WM:0)&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Eero Wi-Fi (Wireless Setup - WM:1)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;How it Works&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;One Sonos product is wired to the network, creating a dedicated, private mesh for other Sonos speakers.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;All Sonos speakers connect to the Eero mesh network as individual clients.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;Primary Advantage&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Isolates audio traffic from general network congestion, dramatically improving stability in most cases.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Leverages the superior speed and features of the modern Eero mesh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;Primary Disadvantage&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Slower, legacy protocol. It can cause network loops if wired incorrectly.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Performance is susceptible to general Wi-Fi interference and router settings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;Key Consideration&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Incompatible with Sonos Move, Roam, and Era speakers, forcing a &amp;quot;mixed mode.&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Requires a robust and healthy Eero network to work reliably.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; Start with the modern Eero Wi-Fi (WM:1) setup. If you experience any instability, switching to SonosNet (WM:0) is the most reliable next step.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;A Quick Troubleshooting Guide&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you&#39;ve followed the rules above and still have issues, here’s how to tackle specific symptoms.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Symptom: Intermittent Audio Dropouts or Disappearing Speakers&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Cause:&lt;/strong&gt; Usually Wi-Fi interference, IP conflicts, or incorrect wiring.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution:&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Double-check the &amp;quot;Golden Rule&amp;quot; of wiring.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure you&#39;ve reserved IP addresses for all Sonos devices.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Switch your setup.&lt;/strong&gt; If you&#39;re on Wi-Fi (WM:1), switch to SonosNet (WM:0) by wiring one speaker to your main Eero. If you&#39;re already on an unstable SonosNet, try going fully wireless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;As a test,&lt;/strong&gt; temporarily disable &amp;quot;Client Steering&amp;quot; in your Eero&#39;s advanced settings. This can sometimes help older 2.4GHz-only Sonos devices.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Symptom: Sonos App Cannot Find the System&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Cause:&lt;/strong&gt; Almost always Double NAT.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution:&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Put your ISP modem/router in Bridge Mode.&lt;/strong&gt; This is the definitive fix.&lt;/li&gt;
&lt;li&gt;Make sure your phone is on your main Eero Wi-Fi, not a guest network.&lt;/li&gt;
&lt;li&gt;On iOS, check that the Sonos app has &amp;quot;Local Network&amp;quot; permission and that &amp;quot;Private Wi-Fi Address&amp;quot; is disabled for your Eero network.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Symptom: Grouped Rooms or Stereo Pairs Fail&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Cause:&lt;/strong&gt; Speakers in a group need to communicate directly with each other. On a mesh network, Eero might place them on different Wi-Fi bands or nodes, breaking this link.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution:&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Switch to SonosNet (WM:0).&lt;/strong&gt; This is the most reliable fix for this specific problem. It consolidates all your speakers onto a single, dedicated network layer, ensuring they can communicate seamlessly for perfect synchronization.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Getting Eero and Sonos to work in perfect harmony is less about luck and more about deliberate, informed configuration. By establishing a clean network foundation and making a conscious choice between a pure Wi-Fi or SonosNet setup, you can build a system that&#39;s powerful, stable, and delivers the premium experience you paid for.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The  Unknown  Art Of  Freestyle  Mic  Checking</title>
    <link href="https://blog.beaubremer.com/posts/the_Unknown_Art%20of_Freestyle_Mic_Checking/"/>
    <updated>2025-06-14T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/the_Unknown_Art%20of_Freestyle_Mic_Checking/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;The Unknown Art of Freestyle Mic Checking&lt;/h3&gt;
&lt;p&gt;You&#39;ve heard it a million times at events: &amp;quot;Check, one, two... check, one, two...&amp;quot; It&#39;s the universal signal that sound is being tested, a little sonic ritual before the show kicks off. For those of us behind the mixer, that simple phrase is often just the opening act for an elaborate, unscripted performance known as the &amp;quot;freestyle mic check.&amp;quot; And let me tell you, it&#39;s an unknown art form.&lt;/p&gt;
&lt;h3&gt;Beyond &amp;quot;One, Two&amp;quot;: The Creative Pressure Cooker&lt;/h3&gt;
&lt;p&gt;Sure, we could say &amp;quot;check, check&amp;quot; repeatedly. But where&#39;s the fun in that? And more importantly, how do you really &lt;em&gt;know&lt;/em&gt; a microphone sounds good until someone says something a little more, well, human? This is where the magic (and sometimes mild panic) happens.&lt;/p&gt;
&lt;p&gt;Imagine this: The venue is quiet. The client is milling about. Maybe the band is watching. The pressure is on to make sure that the mic sounds perfect. And you, the intrepid sound engineer, have to conjure something – anything – to say into it. It’s not just about level and clarity; it&#39;s about making sure it sounds good when someone is actually &lt;em&gt;talking&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, you start. &amp;quot;Testing, testing, one, two, three, testing.&amp;quot; kOay, standard. However, you then need to stretch it out. You need to hit different vocal ranges, project a little, maybe even whisper. This is where the improv kicks in.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Unwritten Rules of Mic Check Improv&lt;/h3&gt;
&lt;p&gt;There are no official classes for this, no textbooks on &amp;quot;Advanced Mic Check Banter.&amp;quot; It’s learned on the job, a quiet rite of passage. Here&#39;s a peek into the unwritten rules and common tactics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Weather Report:&lt;/strong&gt; A classic for a reason. &amp;quot;Looks like it&#39;s going to be a beautiful day here in Chicago, folks. A little humidity, but nothing we can&#39;t handle.&amp;quot; Reliable, relatable, and gets enough varied sounds out of your voice. * * &lt;em&gt;Counting Past Ten (Creatively):&lt;/em&gt;* Beyond the basics, you might hear things like, &amp;quot;One thousand one, one thousand two... are we sure this thing is on?&amp;quot; Or counting in another language if you&#39;re feeling fancy. * &lt;strong&gt;Reciting Nonsense:&lt;/strong&gt; Sometimes, sheer desperation leads to poetry. Or, you know, just listing off groceries. &amp;quot;Milk, bread, eggs, slightly bruised bananas for the crew...&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fake Announcements:&lt;/strong&gt; &amp;quot;Ladies and gentlemen, please remember to silence your cell phones, unless, of course, you&#39;re expecting an incredibly important call about a winning lottery ticket.&amp;quot; * &lt;strong&gt;The Existential Question:&lt;/strong&gt; For the more philosophical engineer. &amp;quot;What &lt;em&gt;is&lt;/em&gt; sound, really? Is it just vibrations? Or is it a feeling... a connection?&amp;quot; (Best delivered with a straight face.) * &lt;strong&gt;Self-Commentary:&lt;/strong&gt; This is where the tongue-in-cheek really shines. &amp;quot;Man, I really need some coffee. Is this thing making my voice sound deeper, or is that just me?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key is to keep it going without drawing too much attention. You&#39;re trying to make the mic sound good, not launch a stand-up comedy career. It’s a delicate balance of projecting confidence while subtly making up words on the fly.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Payoff: Seamless Sound&lt;/h3&gt;
&lt;p&gt;All this impromptu chattering, this vocal gymnastics, serves a crucial purpose: it helps us fine-tune the audio system. We listen for feedback, adjust equalization for different voices, and ensure that when the actual presenter steps up, their message comes through crystal clear.&lt;/p&gt;
&lt;p&gt;So, the next time you hear that &amp;quot;check, one, two,&amp;quot; remember the unsung heroes of the sound world. We’re not just plugging things in; we&#39;re also quietly, creatively, and sometimes awkwardly, ensuring every word sounds perfect. It&#39;s truly an unknown art.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stop Worrying and Start Branching: A Guide to Safer Development</title>
    <link href="https://blog.beaubremer.com/posts/Stop_worrying_and_Start_Branching/"/>
    <updated>2025-06-14T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Stop_worrying_and_Start_Branching/</id>
    <content xml:lang="en" type="html">&lt;p&gt;You&#39;re deep in concentration, adding a new feature to your website, when you suddenly realize... you&#39;ve broken everything. The page won&#39;t load, styles are a mess, and that familiar panic sets in. I&#39;ve definitely been there. For too long, I did all my work directly on the &lt;code&gt;main&lt;/code&gt; branch—the one my live site was built from. Every change was a high-stakes gamble.&lt;/p&gt;
&lt;p&gt;Then, I embraced a professional workflow that brought a new level of safety and confidence to my work: &lt;strong&gt;Git branching&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Think of your &lt;code&gt;main&lt;/code&gt; branch as the &amp;quot;golden copy&amp;quot; of your project. It&#39;s the version that is live, working, and stable. A branch is a parallel copy of your project where you can experiment freely. If your new idea works, you merge it into the golden copy. If it&#39;s a disaster, you delete the branch, and &lt;code&gt;main&lt;/code&gt; remains untouched.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.beaubremer.com/images/blog/git-branching-diagram.svg&quot; alt=&quot;A diagram showing feature branches splitting off from the main Git branch and merging back in.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It brings peace of mind to the development process. Here’s why you should be using it.&lt;/p&gt;
&lt;h2&gt;Why Bother with Branches?&lt;/h2&gt;
&lt;p&gt;It might seem like a few extra steps, but the benefits are enormous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Protect Your Live Site:&lt;/strong&gt; Your &lt;code&gt;main&lt;/code&gt; branch is always protected. You can be confident that it&#39;s in a deployable, working state at all times. No more &amp;quot;I just broke the live site!&amp;quot; panic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiment Freely:&lt;/strong&gt; Want to try a new layout or a wild idea? Create a branch! You can make a mess, try things out, and break whatever you want without any risk to your core project. If it doesn&#39;t work out, there&#39;s no harm done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stay Organized:&lt;/strong&gt; Create a separate branch for each new feature or bug fix. This keeps your work isolated and easy to track. For example, &lt;code&gt;feature/new-contact-form&lt;/code&gt; or &lt;code&gt;fix/mobile-menu-bug&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier Collaboration and Code Reviews:&lt;/strong&gt; If you work on a team, branches are essential. Even for solo developers, they allow you to use Pull Requests on GitHub to review your work before merging. It&#39;s a great way to catch your own mistakes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;My 5-Step Branching Workflow&lt;/h2&gt;
&lt;p&gt;To make this concrete, let me walk you through a real-world example. I recently wanted to change the main header link on my blog. On the homepage, it should point to my main portfolio, but on individual posts, it should point back to the blog&#39;s index. This was a perfect use case for a feature branch.&lt;/p&gt;
&lt;p&gt;Here’s the exact workflow I followed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start from a Clean Slate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before starting anything new, I always make sure my local project is in sync with the latest version on GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# First, switch to your main branch
git checkout main

# Then, pull the latest changes from GitHub (your remote &#39;origin&#39;)
git pull origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Your New Branch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next, I created a new branch and immediately switched to it. I gave it a descriptive name so I&#39;d know its purpose. The &lt;code&gt;-b&lt;/code&gt; flag handles both creating the branch and checking it out in one step.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The -b flag creates a new branch and switches to it
git checkout -b feature/contextual-header-link
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do the Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this new, safe branch, I edited my layout file (&lt;code&gt;_includes/layouts/base.njk&lt;/code&gt;) to add the logic for the contextual link. I made a few small, focused commits along the way to save my progress.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Stage all modified files for the commit
git add .

# Commit your changes with a clear, descriptive message
git commit -m &amp;quot;feat: Make header link contextual&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open a Pull Request&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once I was happy with how it worked on my local machine, I pushed the new branch up to my GitHub repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Push the new branch to your remote repo named &#39;origin&#39;
# The -u flag sets the upstream branch for future pushes
git push -u origin feature/contextual-header-link
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I went to my project on the GitHub website and opened a Pull Request (PR). A PR is a formal way of proposing your changes. It’s a request to pull your new code from the &lt;code&gt;feature/contextual-header-link&lt;/code&gt; branch into the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Merge and Clean Up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Pull Request page on GitHub showed me a summary of all my changes, which I could review one last time. Everything looked good, so I clicked the &amp;quot;Merge pull request&amp;quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This safely merged my work into &lt;code&gt;main&lt;/code&gt; and, in my case, automatically triggered a new deployment to Netlify. After merging, I deleted the feature branch to keep my repository tidy and signal that the work on that specific feature was complete. The work is now safely part of the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;This whole process might seem like extra work at first, but it&#39;ll quickly become a natural part of your routine. It provides a structure for safer, more organized development. Give it a try on your very next task, no matter how small!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More Than Just Plugging In</title>
    <link href="https://blog.beaubremer.com/posts/More_Than_Just_Plugging_In/"/>
    <updated>2025-06-13T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/More_Than_Just_Plugging_In/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;More Than Just Plugging In: What a Live Production Team Really Does Before the Doors Open&lt;/h3&gt;
&lt;p&gt;When you attend a fantastic gala or a smooth corporate event, everything just seems to flow. The lighting perfectly sets the mood, the sound is crystal clear whether it&#39;s a keynote speaker or a band, and the visuals on screen are sharp and engaging. It all looks effortless, almost like magic. But here&#39;s a little secret: that &amp;quot;magic&amp;quot; isn&#39;t accidental. It&#39;s the meticulous result of a dedicated live production team working tirelessly behind the scenes, long before the first guest even steps through the door.&lt;/p&gt;
&lt;p&gt;Most people only see the polished final product, unaware of the weeks, sometimes months, of intricate planning and the intense hours of setup and programming behind it. Ever wonder how that seamless experience truly comes to life? Let&#39;s pull back the curtain and show you what really goes on.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Blueprint: Pre-Production Planning&lt;/h3&gt;
&lt;p&gt;Before a single piece of equipment is even loaded onto a truck, the groundwork is laid. This is the strategic phase where visions turn into detailed plans.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initial Consultations &amp;amp; Needs Assessment:&lt;/strong&gt; Our first step is always to understand the client&#39;s vision thoroughly. What&#39;s the core message of the event? What&#39;s the desired mood? Who is the audience? What are the key goals, and, of course, what&#39;s the budget we&#39;re working with?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Site Visits &amp;amp; Venue Scouting:&lt;/strong&gt; We physically visit the venue to assess everything from power availability and rigging points for lights and speakers, to room acoustics, sightlines for screens, and even the logistics of getting gear in and out via loading docks. This helps us identify and plan around any potential challenges, like low ceilings or strict venue rules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Design &amp;amp; System Architecture:&lt;/strong&gt; This is where the engineers get to work. We create detailed blueprints – including CAD drawings that show equipment placement and signal flow diagrams that map out every cable connection for audio, video, and lighting. We specify the exact equipment needed, from the type of microphones and projectors to the specific lighting fixtures and camera packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Development &amp;amp; Integration:&lt;/strong&gt; We often work closely with clients to ensure all their video playback, presentation slides, and custom graphics are ready. This means making sure everything from speaker slides to custom intro videos is in the correct format, resolution, and aspect ratio for the chosen display systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Permitting &amp;amp; Logistics:&lt;/strong&gt; There&#39;s a lot of paperwork involved, too! We manage venue regulations, ensure compliance with fire marshal requirements, and navigate union rules if applicable. We also coordinate precise loading and unloading schedules to minimize disruptions and ensure seamless operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The Build: Load-in &amp;amp; Setup&lt;/h3&gt;
&lt;p&gt;Once the planning is locked, it&#39;s time for the physical transformation of the space.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Early Birds: Rigging &amp;amp; Power:&lt;/strong&gt; Often, the rigging team is the first on site, safely hanging speaker arrays and lighting trusses from the ceiling. Simultaneously, the power team is running heavy-duty cables to establish the main power distribution for all the equipment. Safety is paramount here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equipment Unload &amp;amp; Prep:&lt;/strong&gt; Hundreds, often thousands, of pounds of gear arrive in meticulously packed cases. Each piece is carefully unloaded, unpacked, inventoried, and double-checked to ensure it&#39;s in perfect working order.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System Deployment &amp;amp; Cabling:&lt;/strong&gt; This is where the space begins to take shape, coming together like a puzzle. Miles of cables for audio, video, data, and power are meticulously run – always neatly, safely, and out of sight, transforming an empty space into a functional event environment. Speakers are hoisted, screens are built, projectors are mounted, cameras are positioned, and the complex control consoles are set up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage &amp;amp; Set Construction:&lt;/strong&gt; While the tech goes in, the physical environment of the show also takes shape. Staging is built, backdrops are put into place, and scenic elements that define the event&#39;s look are assembled.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The Polish: Programming &amp;amp; Testing&lt;/h3&gt;
&lt;p&gt;This is where the artistry and the technical precision truly merge, often for hours on end, refining every detail before the doors open.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lighting Programming:&lt;/strong&gt; Lighting designers spend hours, sometimes days, programming cues for every moment of the event. They craft looks for guest arrival, dramatic entrances, awards presentations, musical performances, and speeches, using light to set the mood, highlight key individuals, and create immersive environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Audio Tuning &amp;amp; Sound Checks: The Unseen Foundation of Clarity&lt;/strong&gt; This is far more than just turning on a microphone and hoping for the best. It&#39;s about meticulously shaping the sound to suit the room&#39;s unique acoustics and the specific needs of the event.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speaker Optimization:&lt;/strong&gt; Our audio engineers use specialized software and measurement microphones to analyze how the speakers interact with the room. This helps eliminate harsh frequencies and prevents echoes, ensuring even sound distribution so every guest hears clearly, regardless of their seating position. It’s about making sure the sound system itself is performing optimally in that space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Microphone Management:&lt;/strong&gt; Each microphone – whether for a CEO, a panelist, or a singer – undergoes individual testing. We set appropriate gain levels, check for potential feedback (that dreaded squeal!), and apply equalization (EQ) to ensure voices are warm, clear, and cut through any background noise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System Integrity:&lt;/strong&gt; This critical phase also catches any loose cables, faulty equipment, or unexpected hums and buzzes that could completely derail a presentation or a musical act. It&#39;s about creating a robust and pristine sonic environment where every sound element can shine without distraction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video Playback &amp;amp; Switching Tests:&lt;/strong&gt; We thoroughly test all video sources, including pre-recorded content, live camera feeds, and speaker presentations. Every transition is practiced, ensuring seamless switching between different inputs during the show.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Show File Creation &amp;amp; Backup:&lt;/strong&gt; All the painstaking programming for lighting, audio, and video is saved as &amp;quot;show files.&amp;quot; Crucially, multiple redundant backups are created to protect against any unforeseen technical glitches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rehearsals with Talent/Presenters: The Critical Dry Run&lt;/strong&gt;
This is perhaps the most underestimated phase, and yet, it&#39;s absolutely crucial for a smooth show. Many outside of production might see it as an unnecessary added step, but it&#39;s where theoretical planning meets real-world execution.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cue-to-Cue (C2C):&lt;/strong&gt; This is where the entire technical team practices every single lighting change, video playback, sound cue, and camera shot in precise sequence. It&#39;s about perfecting the timing and flow of the show, ensuring everyone on the team is perfectly synchronized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working with Presenters:&lt;/strong&gt; For speakers, performers, and hosts, rehearsals are vital. They get comfortable with the stage layout, the lectern, the microphone technique, and how to advance their slides. This practice helps them feel confident and allows the production team to anticipate their needs – like when they might move to a different part of the stage or need a specific video cued up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Troubleshooting Live:&lt;/strong&gt; Crucially, rehearsals are the ideal time to identify and address potential issues before the audience arrives. A speaker might realize their remote isn&#39;t working from where they stand, or a video might not play correctly – all these potential pitfalls can be identified and fixed in a rehearsal, preventing awkward pauses, technical glitches, or embarrassing moments during the actual event.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Building Confidence:&lt;/strong&gt; For both the production team and the talent on stage, rehearsals build immense confidence. Everyone knows their role, the timing is locked in, and the performance can be delivered flawlessly, allowing the presenters to focus on their message and the audience to enjoy the experience without interruption.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Ready for Showtime!&lt;/h3&gt;
&lt;p&gt;Ultimately, the goal of a live production team is simple yet profound: to seamlessly transform a client&#39;s vision into an unforgettable reality for every single attendee.&lt;/p&gt;
&lt;p&gt;So, the next time you&#39;re at an event and find yourself marveling at how perfectly everything runs, take a moment to remember the dedicated team behind the scenes. They’re the ones who made that &amp;quot;magic&amp;quot; happen, meticulously planning and executing long before you ever took your seat. It truly is &amp;quot;more than just plugging in.&amp;quot;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Keep Calm and Troubleshoot On</title>
    <link href="https://blog.beaubremer.com/posts/Keep_Calm_and_Troubleshoot%20On/"/>
    <updated>2025-06-13T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Keep_Calm_and_Troubleshoot%20On/</id>
    <content xml:lang="en" type="html">&lt;p&gt;It’s 3:17 A.M., and the third phone call in a row just shattered your peaceful sleep. A critical system is down, and you can already feel the panic starting to bubble up. In these moments, it’s easy to think that the solution lies in typing faster or knowing more obscure commands. But what if the most powerful tool you have is simply a calm, focused mind?&lt;/p&gt;
&lt;p&gt;It turns out that staying cool under pressure isn&#39;t just a personality trait; it&#39;s a skill you can learn. Let&#39;s break down how to handle the heat without getting burned.&lt;/p&gt;
&lt;h4&gt;Why Your Brain Shuts Down When the Server Does&lt;/h4&gt;
&lt;p&gt;Ever notice how it’s suddenly impossible to remember a simple command when your boss is standing over your shoulder? That&#39;s not a personal failure; it&#39;s a biological phenomenon. When you get stressed, your body goes into &amp;quot;fight or flight&amp;quot; mode, flooding your system with hormones like cortisol and adrenaline.&lt;/p&gt;
&lt;p&gt;This response is fantastic if you need to outrun a saber-toothed tiger, but it&#39;s terrible for debugging a complex system. These stress hormones actively sabotage the parts of your brain responsible for problem-solving, memory, and decision-making. In other words, the pressure that&#39;s meant to speed you up actually makes you less effective.&lt;/p&gt;
&lt;h4&gt;Your Mental Emergency Brake: The STOP Skill&lt;/h4&gt;
&lt;p&gt;So, how do you fight back against your biology? You can start with a simple but powerful tool called the DBT STOP skill. The next time you feel overwhelmed, just run through these four steps:&lt;/p&gt;
&lt;h4&gt;S - Stop&lt;/h4&gt;
&lt;p&gt;Seriously, just stop. Don&#39;t type another command. Don’t say another word. Just freeze for a second to break the cycle of panic.&lt;/p&gt;
&lt;h4&gt;T - Take a Breath&lt;/h4&gt;
&lt;p&gt;Take one deliberate, deep breath. This is a direct physiological intervention that tells your nervous system it’s time to chill out by activating the parasympathetic nervous system.&lt;/p&gt;
&lt;h4&gt;O - Observe&lt;/h4&gt;
&lt;p&gt;Take a quick, non-judgmental look at what’s going on. What are you thinking? What are you feeling? What&#39;s the reality of the situation?&lt;/p&gt;
&lt;h4&gt;P - Proceed Mindfully&lt;/h4&gt;
&lt;p&gt;Now that you&#39;ve interrupted the panic, you can choose your next move intentionally instead of just reacting.&lt;/p&gt;
&lt;h4&gt;Don&#39;t Just Do Something, Stand There!&lt;/h4&gt;
&lt;p&gt;In a crisis, the pressure to &amp;quot;do something&amp;quot; is immense, and every minute of downtime feels like an hour. It’s tempting to take a shortcut that looks like it will save time, but that shortcut is a real risk. A single, panicked action—like randomly restarting a service or tweaking a config file without a clear reason—can create a new problem on top of the old one.&lt;/p&gt;
&lt;p&gt;This is where you have to remember the paradox of troubleshooting: &lt;strong&gt;the fastest path to a solution is often the most deliberate one.&lt;/strong&gt; Sticking to your plan might feel slower in the moment, but it prevents the kind of hasty mistakes that can make the total fix time much, much longer. You risk digging the hole deeper and spending the next hour just trying to get back to where you started. Taking a moment to breathe and observe isn&#39;t wasting time; it&#39;s what ensures you&#39;re moving toward a resolution, not just creating more chaos.&lt;/p&gt;
&lt;h4&gt;Find the Root Cause with the &amp;quot;5 Whys&amp;quot; Method&lt;/h4&gt;
&lt;p&gt;Panic loves chaos, but a structured process brings order. One of the simplest and most effective methods for getting to the heart of an issue is the &amp;quot;5 Whys&amp;quot; technique. It’s exactly what it sounds like: you just keep asking &amp;quot;Why?&amp;quot; until you move past the symptoms and find the real source of the problem.&lt;/p&gt;
&lt;p&gt;Imagine a website is down:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Why is it down?&lt;/strong&gt; Because the web servers are unhealthy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why are they unhealthy?&lt;/strong&gt; Because the web server process crashed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why did it crash?&lt;/strong&gt; Because the server ran out of memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why did it run out of memory?&lt;/strong&gt; Because a log file grew until it filled up all the disk space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why did the log file get so big?&lt;/strong&gt; Because a recent code change accidentally left verbose debugging on in the live environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without this process, you might have just restarted the server at step #2, only for it to crash again. The &amp;quot;5 Whys&amp;quot; guides you straight to the root cause, which was actually a procedural failure.&lt;/p&gt;
&lt;h4&gt;Managing the Humans&lt;/h4&gt;
&lt;p&gt;Technical problems always involve people, and people have anxieties. A considerable part of your job during a crisis is managing their stress so you can focus.&lt;/p&gt;
&lt;p&gt;The key is proactive communication. Send out regular updates, even if the update is just, &amp;quot;We&#39;re still investigating.&amp;quot; This fills the information vacuum and shows you&#39;re in control. When someone demands a time for the fix, it’s better to explain your process than to give a deadline you can&#39;t guarantee. Try something like, &amp;quot;Right now, our focus is on analyzing the logs to find the source. I&#39;ll have another update in 15 minutes.&amp;quot;&lt;/p&gt;
&lt;p&gt;Mastering these skills—managing your panic, sticking to a method, and communicating clearly—is what separates the pros from the rest. It helps you not only survive the fire but also emerge as a more resilient and respected professional.&lt;/p&gt;
&lt;p&gt;And if you can&#39;t figure it out after all that? Well, how many programmers does it take to change a light bulb? &lt;em&gt;None&lt;/em&gt;, that&#39;s a hardware problem.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dive into QLab</title>
    <link href="https://blog.beaubremer.com/posts/dive_Qlab/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/dive_Qlab/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;Dive into QLab: Your New Best Friend for Show Control!&lt;/h2&gt;
&lt;p&gt;Hey everyone! Ever wondered how those amazing live shows, plays, or even presentations manage to switch between music, video, and lights flawlessly? Often, the seamless magic behind the scenes is all thanks to a fantastic piece of software called QLab.&lt;/p&gt;
&lt;p&gt;QLab is a powerful tool for show control, used by professionals and hobbyists alike to create incredibly precise and complex cue lists. But don&#39;t let &amp;quot;powerful&amp;quot; scare you off – especially since you can download a feature-rich free version! It&#39;s also incredibly intuitive once you get the hang of it, and it can elevate your projects.&lt;/p&gt;
&lt;p&gt;Today, we&#39;re going to take a super quick look at QLab and then dive into one of its most common uses: adding music cues. Get ready to make your audio playback smooth as silk!&lt;/p&gt;
&lt;h3&gt;Getting Started with QLab&lt;/h3&gt;
&lt;p&gt;First things first, if you don&#39;t have QLab, you can download it for free from the Figure 53 website. The free version, called QLab Free, offers a wide range of features, particularly for audio playback, making it ideal for getting started.&lt;/p&gt;
&lt;p&gt;Once you open QLab, you&#39;ll see a clean workspace. This is where you&#39;ll build your &amp;quot;cue list,&amp;quot; which is essentially a chronological list of everything you want to happen during your show.&lt;/p&gt;
&lt;h3&gt;Quick Tutorial: Adding Music Cues in QLab&lt;/h3&gt;
&lt;p&gt;Let&#39;s get straight to it and add some music!&lt;/p&gt;
&lt;h4&gt;1. Open Your Workspace&lt;/h4&gt;
&lt;p&gt;When you open QLab, you&#39;ll usually be presented with a new, blank workspace. This is your canvas.&lt;/p&gt;
&lt;h4&gt;2. Drag and Drop Your Audio&lt;/h4&gt;
&lt;p&gt;The easiest way to get music into QLab is to drag an audio file (like an MP3, WAV, or AIFF) directly from your computer&#39;s folders into the QLab window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; Use uncompressed audio files with Qlab (like WAV or AIFF) for the best quality and performance, but MP3s work just fine for many applications, especially for getting started.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Meet Your First Cue&lt;/h4&gt;
&lt;p&gt;Once you drag in an audio file, QLab automatically creates an &amp;quot;Audio Cue&amp;quot; for it. You&#39;ll see it appear in your cue list. Each cue has a &amp;quot;Q Number&amp;quot; (its position in the list) and a &amp;quot;Q Name&amp;quot; (usually the file name by default).&lt;/p&gt;
&lt;h4&gt;4. The Inspector – Your Control Panel&lt;/h4&gt;
&lt;p&gt;Below your cue list, you&#39;ll see the &amp;quot;Inspector&amp;quot; panel. This is your control hub, where all the magic happens! When you select a cue, the Inspector dynamically updates to show you all the properties and settings for that specific cue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For an audio cue, you&#39;ll see tabs like &amp;quot;Levels&amp;quot; (for volume), &amp;quot;Time &amp;amp; Loops&amp;quot; (for start/end times and looping), and &amp;quot;Audio&amp;quot; (for routing to different outputs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. Setting Playback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Volume:&lt;/strong&gt; Go to the &amp;quot;Levels&amp;quot; tab in the Inspector. You can adjust the overall volume of your music cue here using the fader. (And yes, you can create smooth fades in and out later, but for now, just set a static level!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start and End Times:&lt;/strong&gt; In the &amp;quot;Time &amp;amp; Loops&amp;quot; tab, you can set exactly when your audio starts and ends within the file. This is super handy if you only want to play a specific section of a song. Just drag the start and end markers on the waveform, or type in specific times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6. Playing Your Cue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;Go&amp;quot; Button:&lt;/strong&gt; The big &amp;quot;Go&amp;quot; button at the bottom of the QLab window is your best friend. Click it (or press the Spacebar, which is the default hotkey) to trigger the selected cue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stop Button:&lt;/strong&gt; Need to stop a cue? Click the &amp;quot;Stop&amp;quot; button next to &amp;quot;Go.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What&#39;s Next?&lt;/h3&gt;
&lt;p&gt;This is just the tip of the iceberg with QLab, but understanding how to add and control basic audio cues is a huge first step. From here, you can explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fades:&lt;/strong&gt; Make your music fade in and out smoothly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cue Triggers:&lt;/strong&gt; How to automatically trigger cues, or link them to other cues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hotkeys:&lt;/strong&gt; Assigning keyboard shortcuts for quick playback.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Groups:&lt;/strong&gt; Organizing multiple cues together.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While QLab might seem a little intimidating at first glance, I promise you, once you start playing around with it, you&#39;ll quickly discover how powerful and genuinely &lt;em&gt;fun&lt;/em&gt; it is. It truly opens up a world of possibilities for controlling your live events with precision and creativity.&lt;/p&gt;
&lt;p&gt;Happy cueing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Essential Git: Part 2: Safely Undoing Changes with git revert</title>
    <link href="https://blog.beaubremer.com/posts/Essential_Git_Revert/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Essential_Git_Revert/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;Working with Git is fantastic for managing your code, but sometimes, you push changes you later realize aren&#39;t quite right.&lt;/h3&gt;
&lt;p&gt;Maybe a feature introduced a bug, or a configuration change is causing problems. When this happens, &lt;code&gt;git revert&lt;/code&gt; comes to the rescue!&lt;/p&gt;
&lt;p&gt;It&#39;s a super important tool, especially when you&#39;ve already shared your work (like pushing to a remote repository or deploying to a service like Vercel).&lt;/p&gt;
&lt;h3&gt;What is &lt;code&gt;git revert&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;Simply put, &lt;code&gt;git revert&lt;/code&gt; creates new commits that undo the changes from previous commits. It&#39;s like writing an &amp;quot;undo&amp;quot; commit.&lt;/p&gt;
&lt;p&gt;The key difference from other Git commands like &lt;code&gt;git reset&lt;/code&gt; is that &lt;code&gt;git revert&lt;/code&gt; does not rewrite your project&#39;s history. Instead, it adds new history that cancels out the old. This makes it a much safer option when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;ve already pushed your commits to a shared remote repository.&lt;/li&gt;
&lt;li&gt;You&#39;re working on a public branch (like &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;You need to maintain a clear, linear history of changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When to Use &lt;code&gt;git revert&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Think of &lt;code&gt;git revert&lt;/code&gt; as your go-to for &amp;quot;undoing&amp;quot; when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You&#39;ve pushed a bad commit:&lt;/strong&gt; This is exactly what we just experienced. If you have a commit causing issues on your live Vercel site, reverting it safely brings you back without erasing the fact that the commit ever existed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You want to undo specific commits in your history:&lt;/strong&gt; You can pick and choose which commits to undo, even if they&#39;re not the very last ones.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You need to collaborate:&lt;/strong&gt; Since it doesn&#39;t rewrite history, &lt;code&gt;git revert&lt;/code&gt; is polite to your teammates&#39; repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step-by-Step Tutorial: Reverting a Commit&lt;/h3&gt;
&lt;p&gt;Let&#39;s walk through how to use &lt;code&gt;git revert&lt;/code&gt; to undo a specific commit.&lt;/p&gt;
&lt;h4&gt;Step 1: Identify the Commit to Revert&lt;/h4&gt;
&lt;p&gt;First, you need to find the commit hash (the unique ID) of the commit you want to undo. This should be the commit that introduced the changes you want to reverse.&lt;/p&gt;
&lt;p&gt;Open your terminal or Git Bash in your project&#39;s root directory and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git log


This command shows you your project&#39;s commit history, with the most recent commits at the top. Scroll down until you find the commit you want to undo. The commit hash is the long string of characters next to commit (e.g., 71a224ee41eec4599329bb65c893de855d441f62).
Once you&#39;ve found it, copy its full hash.



```markdown
#### Step 2: Perform the Revert

Now, use the `git revert` command with the commit hash you copied.

```bash
git revert &amp;lt;commit-hash&amp;gt;


Replace &amp;lt;commit-hash&amp;gt; with the actual hash.
What happens next?
Git will attempt to reverse the changes introduced by that commit.
If the revert is straightforward (no conflicts), Git will automatically prepare a new commit for you.
Step 3: Handle the Commit Message
When git revert prepares a new commit, it will automatically open your default Git editor (like Vim or Nano in the terminal, or potentially VS Code if configured) with a pre-filled commit message. This message typically starts with &amp;quot;Revert&amp;quot; and includes information about the commit you&#39;re undoing.
You can accept the default message as is.
You can add your own notes to explain why you&#39;re reverting.
To save and exit the commit message:
If it&#39;s Vim: Press the Esc key, then type :wq and press Enter.
If it&#39;s Nano, press Ctrl+X, then Y to confirm saving, and then press Enter.
Once you save and exit, Git will create the new &amp;quot;revert&amp;quot; commit.
Step 4: Push Your Reverted Changes
Finally, push your new revert commit to your remote repository (e.g., GitHub, GitLab, or Vercel).

Bash


git push


This will update your remote branch, and if you&#39;re using Vercel, it will trigger a new deployment with the reverted code.
Troubleshooting Common git revert Issues
Sometimes, git revert isn&#39;t a smooth ride. Here are the most common bumps you might hit and how to fix them:
Issue 1: Merge Conflicts (CONFLICT (content): Merge conflict in &amp;lt;filename&amp;gt;)
This is what we faced! It means Git found changes in the commit you&#39;re reverting that overlap with other changes made since that commit. Git doesn&#39;t know which version to keep, so it asks you to decide.
How to fix it:
Identify the Conflict: Git will tell you which files have conflicts (e.g., script.js). Open these files in your code editor.
Look for Conflict Markers: Inside the conflicted file, you&#39;ll see special markers like this:
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
// Code from your current branch (your latest work)
=======
// Code from the commit you are trying to revert (the older version)
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;lt;commit-hash-of-reverted-commit&amp;gt;





```markdown
    * **Manually Resolve:**
        * Delete the Git conflict markers (`&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;`, `=======`, `&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;`).
        * Edit the code within that section. Since you&#39;re trying to undo, you&#39;ll typically want to delete the code that was introduced by the commit you&#39;re reverting (the part between `=======` and `&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;`) and keep the `HEAD` version, or combine them as needed to achieve the desired state of the file without the problematic changes.
        * Save the file.

    * **Stage the Resolved File:** After fixing the file and saving it, you must tell Git that you&#39;ve resolved the conflict:

        ```bash
        git add &amp;lt;filename&amp;gt;
        ```
        Example: `git add script.js`

    * **Complete the Revert Commit:** Now that the conflict is staged, you can finalize the revert:

        ```bash
        git commit
        ```
        This will open the commit message editor. Save and exit as in Step 3 of the main tutorial.



Markdown


#### Issue 2: &amp;quot;Nothing to commit&amp;quot; or &amp;quot;empty revert&amp;quot;

This message appears if the commit you&#39;re trying to revert doesn&#39;t actually introduce any new changes, or if those changes have already been undone by a subsequent commit. Git determines there&#39;s nothing to revert.

* **What to do:**
    * If you&#39;re sure there were changes, double-check your `git log` to ensure you picked the correct commit hash.
    * If the changes truly vanished or were undone, you might not need to do anything.

#### Issue 3: Reverting a Range of Commits

If you want to undo several commits in a sequence, you can specify a range:

```bash
git revert &amp;lt;FIRST_COMMIT_HASH&amp;gt;..&amp;lt;LAST_COMMIT_HASH&amp;gt;


This will revert each commit one by one. You might be prompted for a commit message for each revert, or you might hit merge conflicts for each.
You can add --no-edit to use the default message for each revert without opening the editor:
Bash
git revert --no-edit &amp;lt;FIRST_COMMIT_HASH&amp;gt;..&amp;lt;LAST_COMMIT_HASH&amp;gt;


Or --no-commit to stage all reverts as one single new commit, which is often cleaner:
Bash
git revert --no-commit &amp;lt;FIRST_COMMIT_HASH&amp;gt;..&amp;lt;LAST_COMMIT_HASH&amp;gt;
followed by a single git commit.



```markdown
#### Issue 4: You Need to Go Back to an Exact Past State, Not Just Undo Specific Commits

Sometimes, you don&#39;t just want to undo specific commits, but instead completely reset your branch to how it looked at a previous point in history, discarding everything that came after. This is where `git reset --hard` comes in.

**WARNING:** `git reset --hard` rewrites history. If you&#39;ve pushed these commits, using `git reset --hard` followed by `git push --force` will cause problems for collaborators who have the older history. Only use this if you are absolutely sure you are the sole contributor or can coordinate with your team.

* **How to do it (use with extreme caution):**
    * **Find the desired commit hash:** Use `git log` to find the commit hash of the exact state you want your branch to be in.
    * **Reset locally:**
        ```bash
        git reset --hard &amp;lt;commit-hash&amp;gt;
        ```
    * **Force Push:**
        ```bash
        git push --force
        ```

`git revert` is a powerful and safe way to manage your project&#39;s history. Understanding how to use it, especially for handling conflicts, will save you a lot of headaches in your development journey!
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Essential Git: Part 1</title>
    <link href="https://blog.beaubremer.com/posts/Essential_Git%20part_1/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Essential_Git%20part_1/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;Your Essential Git Toolkit: A Friendly Guide&lt;/h2&gt;
&lt;p&gt;Git can seem a bit intimidating at first, but it&#39;s just a system to help you keep track of changes in your code (or any files, for that matter) and collaborate smoothly. Think of it as a super-powered save button with a memory of every single change you&#39;ve ever made.&lt;/p&gt;
&lt;p&gt;Let&#39;s dive into the commands you&#39;ll use most often:&lt;/p&gt;
&lt;h3&gt;1. &lt;code&gt;git status&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why you use it:&lt;/strong&gt; Before you do anything else, you&#39;ll want to know what&#39;s going on. &lt;code&gt;git status&lt;/code&gt; tells you which files you&#39;ve changed, which ones are new, and whether anything is ready to be saved. It&#39;s your quick check-in to see the current state of your working directory compared to your last saved version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How you use it:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Check the current status of your Git repository
git status
&lt;/code&gt;&lt;/pre&gt;
This command will give you a clear rundown of your changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. &lt;code&gt;git add .&lt;/code&gt; (or &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why you use it:&lt;/strong&gt; When you make changes to your files, Git doesn&#39;t automatically track them for your next save. You need to explicitly tell Git which changes you want to include in your next &amp;quot;snapshot&amp;quot; (called a commit). Using &lt;code&gt;git add .&lt;/code&gt; is a common shortcut to add all modified and new files in your current directory and its subdirectories to the &amp;quot;staging area.&amp;quot; If you only want to add a specific file, you&#39;d use &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How you use it:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# To stage all modified and new files in the current directory and subdirectories
git add .

# To stage only a specific file
git add my-new-feature.js
&lt;/code&gt;&lt;/pre&gt;
You&#39;ll often run &lt;code&gt;git status&lt;/code&gt; right after this to confirm what you&#39;ve staged.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. &lt;code&gt;git commit -m &amp;quot;Your descriptive message here&amp;quot;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why you use it:&lt;/strong&gt; A commit is a snapshot of your project at a specific point in time. It&#39;s like taking a picture of your entire project&#39;s state. The &lt;code&gt;-m&lt;/code&gt; flag lets you add a short, descriptive message about what changes you made in that commit. Good commit messages are essential – they help you (and others) understand the history of your project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How you use it:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Create a new commit with a descriptive message
git commit -m &amp;quot;Add user login functionality and fix button styling&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
Make sure your message is clear and concise!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. &lt;code&gt;git push origin main&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why you use it:&lt;/strong&gt; After you&#39;ve committed your changes locally, they&#39;re only on your computer. To share them with others or to back them up on a remote server (like GitHub, GitLab, or Bitbucket), you use &lt;code&gt;git push&lt;/code&gt;. &lt;code&gt;origin&lt;/code&gt; typically refers to the default remote repository where your project lives online, and &lt;code&gt;main&lt;/code&gt; is the name of the branch you&#39;re pushing to (it used to be called &lt;code&gt;master&lt;/code&gt;, but &lt;code&gt;main&lt;/code&gt; is the new standard).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How you use it:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Push your committed changes from your local &#39;main&#39; branch to the &#39;origin&#39; remote
git push origin main
&lt;/code&gt;&lt;/pre&gt;
If you&#39;re working on a different branch, you&#39;d replace &lt;code&gt;main&lt;/code&gt; with your branch name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A Few Extra Tips!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Branches are your friends:&lt;/strong&gt; While we focused on the &lt;code&gt;main&lt;/code&gt; branch today, Git is fantastic because you can create &amp;quot;branches&amp;quot; for new features or bug fixes. This lets you work on something new without messing up the main, stable version of your project. Once your work is ready, you can merge it back into the &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&#39;t be afraid to experiment:&lt;/strong&gt; Git is designed to be undo-friendly. If you make a mistake, there&#39;s usually a way to fix it. That&#39;s why it&#39;s so great!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice makes perfect:&lt;/strong&gt; The more you use these commands, the more natural they&#39;ll feel. Try creating a small test project and just playing around with making changes, adding, committing, and pushing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this helps you feel more comfortable jumping into the world of Git! It&#39;s an incredibly valuable tool for anyone working with code. Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Welcome to the Blog</title>
    <link href="https://blog.beaubremer.com/posts/my_first_post/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/my_first_post/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;Welcome! I&#39;m New Here (And I Have No Idea What I&#39;m Doing)&lt;/h2&gt;
&lt;p&gt;Well, I did it. I finally have a new online home. Welcome!&lt;/p&gt;
&lt;p&gt;Right now, this space is a bit like me on a Monday morning: a work in progress, slightly confused, but full of potential. I&#39;m busy behind the scenes, untangling the technical knots and figuring out how all this stuff works. (If you hear faint screaming, it&#39;s just me trying to center an image.)&lt;/p&gt;
&lt;p&gt;I&#39;ll be adding all my previously posted articles here soon, they will show up eventually. More importantly, I&#39;ve got some new ideas I&#39;m excited to share with you once I&#39;m sure I won&#39;t accidentally delete the entire internet.&lt;/p&gt;
&lt;p&gt;So, have a look around, don&#39;t mind the occasional digital pothole, and thanks for being here at the very beginning. Let&#39;s get this show on the road!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Case of the Persistent Contact Form: A Debugging Odyssey</title>
    <link href="https://blog.beaubremer.com/posts/contact_form/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/contact_form/</id>
    <content xml:lang="en" type="html">&lt;h3&gt;The Case of the Persistent Contact Form: A Debugging Odyssey&lt;/h3&gt;
&lt;p&gt;Hey tech enthusiasts and fellow web wranglers!&lt;/p&gt;
&lt;p&gt;Have you ever stared at a seemingly simple feature – like a contact ofrm – and wondered why it&#39;s putting up such a fight? Well, I recently went on an epic debugging adventure with my own website&#39;s contact form, and let me tell you, it was a journey filled with unexpected twists, a few head-scratching moments, and ultimately, a satisfying victory.&lt;/p&gt;
&lt;p&gt;If you&#39;re currently wrestling with a stubborn form, a missing CAPTCHA,. Email notifications that just won&#39;t trigger, you might find some solace (and hopefully some solutions!) in my tale.&lt;/p&gt;
&lt;p&gt;**The Initial Setup (Seemed Simple Enough!) **&lt;/p&gt;
&lt;p&gt;My goal was straightforward: a clean, effective contact form on my personal site, protected by a CAPTCHA to ward off those pesky bots, and set up to send me an email whenever someone reached out. I opted for Netlify to host my static site, Cloudflare Turnstile for a user-friendly CAPTCHA, and Resend for reliable email delivery.&lt;/p&gt;
&lt;p&gt;The initial setup involved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crafting the HTML form. * Writing a Netlify serverless function in JavaScript to handle the form submission, CAPTCHA verification, and email sending via Resend. * Adding a sprinkle of client-side JavaScript for form validation and submission handling. * Configuring environment variables in Netlify for API keys and secrets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds reasonable, right? That&#39;s what I thought too...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The First Signs of Trouble (and the Rabbit Hole)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Initially, the site looked great (thanks to Tailwind CSS. A cool three.js background animation – another story for another time!). But the contact form? Radio silence. No CAPTCHA widget, and definitely no emails landing in my inbox.&lt;/p&gt;
&lt;p&gt;This is where the debugging adventure truly began. What followed was a deep idve into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Browser Developer Tools (My Best Friend!) **: Console logs became my daily bread, and network requests my guiding stars. We meticulously checked for JavaScript errors, failed API calls, and Content Security Policy violations. * &lt;strong&gt;Netlify Deployment Logs&lt;/strong&gt;: Scrutinizing every stage of the build and deployment process became crucial to ensure our serverless function was being included correctly. * &lt;strong&gt;Cloudflare Turnstile Dashboard&lt;/strong&gt;: Double-checking site keys, secret kyes, and even experimenting with different settings. * &lt;strong&gt;Resend Logs&lt;/strong&gt;: Monitoring email sending attempts to see if the requests were even reaching the service. What the responses were. * &lt;strong&gt;HTTP Headers (The Silent Guardians)&lt;/strong&gt;: We spent a surprising amount of time wrestling with the &lt;code&gt;netlify.toml&lt;/code&gt; file and its security headers, learning firsthand how a misconfigured policy can block essential resources. * &lt;strong&gt;Environment Variables (The Keepers of Secrets)&lt;/strong&gt;: Ensuring API keys were correctly stored and accessed by our Netlify function. * &lt;strong&gt;Branching and Deployment Contexts&lt;/strong&gt;: Briefly suspected we might be working on the wrong version of the site!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Learnings and Aha! Moments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Throughout this process, several key learnings emerged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Order Matters&lt;/strong&gt;: In our &lt;code&gt;index.html&lt;/code&gt;, the order in which scripts were loaded (especially Three.js and our main &lt;code&gt;script.js&lt;/code&gt;) had a significant impact on whether the page rendered correctly. * **Security is Paramount (and Tricky!) **: Content Security Policy is a powerful tool, but it requires careful configuration to avoid unintentionally blocking legitimate resources like third-party CAPTCHA scripts and analytics. * &lt;strong&gt;Serverless Functions Can Be Elusive&lt;/strong&gt;: Debugging server-side code running in a cloud environment requires a different mindset than local development. Netlify&#39;s function logs and the ability to download deployed functions became invaluable. * &lt;strong&gt;Deployment Consistency is Key&lt;/strong&gt;: We encountered situations where local code wasn&#39;t making its way to the deployed site as expected, highlighting the importance of proper Git practices. * &lt;strong&gt;Every Error Message is a Breadcrumb&lt;/strong&gt;: Even cryptic error messages in the browser console or network logs provide valuable clues if you know where to look and how to interpret them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**The Sweet Taste of Success (Finally!) **&lt;/p&gt;
&lt;p&gt;After what felt like countless iterations, meticulous log analysis, and a few moments of pure frustration, we finally cracked the code! The issues ranged from a missing Three.js script tag, overly restrictive security policies, and even ensuring the correct version of our Netlify function was being deployed.&lt;/p&gt;
&lt;p&gt;The moment the CAPTCHA widget appeared, the form started submitting correctly, and those email notifications began landing in my inbox was incredibly rewarding.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips for Your Own Debugging Adventures&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re facing similar challenges with your contact form or website features, here are a few takeaways from my experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be Patient and Systematic&lt;/strong&gt;: Debugging often involves trial and error, but a systematic approach of checking logs, isolating variables, and making small, incremental changes is crucial. * &lt;strong&gt;Leverage Your Browser&#39;s Developer Tools&lt;/strong&gt;: Become comfortable with the Console, Network, and Security tabs. They provide a wealth of information. * **Read the Documentation (Carefully!) **: The documentation for services like Netlify, Cloudflare Turnstile, and Resend is your best friend. Pay close attention to configuration instructions and common troubleshooting steps. * &lt;strong&gt;Don&#39;t Be Afraid to Ask for Help&lt;/strong&gt;: Online communities and forums can be incredibly valuable resources when you&#39;re stuck. Clearly explaining your problem and what you&#39;ve tried so far will help others assist you. * &lt;strong&gt;Celebrate the Small Victories&lt;/strong&gt;: Debugging can be mentally taxing. Acknowldege and celberate each step forward, no matter how small.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Journey Continues...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While this particular debugging odyssey has reached its conclusion, the world of web development is constantly evolving. There will always be new challenges to overcome and new things to learn. And that, in itself, is part of the adventure.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Chose Eleventy for My Blog (And How I Secured It)</title>
    <link href="https://blog.beaubremer.com/posts/Eleventy_for_My_Blog/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Eleventy_for_My_Blog/</id>
    <content xml:lang="en" type="html">&lt;h4&gt;After getting my main portfolio site into a stable, secure state, I decided it was time to add a blog.&lt;/h4&gt;
&lt;p&gt;My core requirements were simple but non-negotiable: it had to be modern, straightforward to maintain, and—most importantly—built in a way that couldn&#39;t possibly break my main portfolio site during development.&lt;/p&gt;
&lt;p&gt;This led me down the path of creating a completely separate, standalone blog site. Here’s a look at the &amp;quot;why&amp;quot; behind the tools I chose and the security precautions we took along the way. Why Eleventy? The &amp;quot;Keep It Simple&amp;quot; Philosophy&lt;/p&gt;
&lt;p&gt;In today&#39;s landscape of complex JavaScript frameworks, I was looking for something simpler. After some research, I landed on Eleventy (11ty), a modern Static Site Generator (SSG).&lt;/p&gt;
&lt;p&gt;It was the perfect choice for a few key reasons:&lt;/p&gt;
&lt;p&gt;Simplicity and Flexibility: Eleventy doesn&#39;t lock you into a heavy framework like React or Vue. It&#39;s incredibly flexible and un-opinionated, letting you work with simple templates and data. This felt perfect for a straightforward, content-focused blog. JavaScript-Based: The entire configuration is done in plain JavaScript (.eleventy.js), which felt comfortable and accessible. There was no need to learn a new programming language just to build a blog. Peak Performance &amp;amp; Security: By default, Eleventy generates pre-built, static HTML files. This means there&#39;s no database to hack and no complex server-side code running on every page view. The result is a site that is incredibly fast and secure right out of the box.&lt;/p&gt;
&lt;h4&gt;A Security-First Approach&lt;/h4&gt;
&lt;p&gt;A static site is secure by default, but I wanted to take it a step further and ensure it was hardened against modern web vulnerabilities. The main tool for this was Netlify.toml file placed at the root of the project, which allowed me to define custom HTTP security headers.&lt;/p&gt;
&lt;p&gt;Here are the key security layers we implemented:&lt;/p&gt;
&lt;h4&gt;1. Content Security Policy (CSP): The Digital Bouncer&lt;/h4&gt;
&lt;p&gt;The most important header we added was a strong Content Security Policy. Think of a CSP as a bouncer for your website—it maintains a strict guest list of all the resources (scripts, styles, fonts, etc.) that are allowed to load on the page. Anything not on the list gets blocked.&lt;/p&gt;
&lt;p&gt;My policy explicitly whitelists trusted sources for each type of content:&lt;/p&gt;
&lt;p&gt;script-src: Only allows scripts from my domain and the trusted Tailwind CSS CDN.
style-src: Only allows stylesheets from my domain and Google Fonts.
font-src: Only allows fonts to be downloaded from Google&#39;s font servers (fonts.gstatic.com).
object-src &#39;none&#39;: Completely blocks older, insecure plugins like Flash from ever running.&lt;/p&gt;
&lt;p&gt;The &#39;unsafe-inline&#39; Caveat: The one necessary compromise was allowing &#39;unsafe-inline&#39; for styles. This was required for the Tailwind CSS CDN script to work, as it dynamically injects styles into the page. However, the risk is heavily mitigated because the rest of the policy still locks down the overall source of any scripts.&lt;/p&gt;
&lt;h4&gt;2. Other Essential Headers:&lt;/h4&gt;
&lt;p&gt;Beyond the CSP, we added several other headers for a layered defense:&lt;/p&gt;
&lt;p&gt;Strict-Transport-Security (HSTS): Ensures that browsers only ever communicate with my site over a secure HTTPS connection. X-Frame-Options: Set to DENY, this completely prevents my site from being embedded in an iframe on another website, which is the primary defense against &amp;quot;clickjacking&amp;quot; attacks. Permissions Policy: This is a modern header that allows me to lock down browser features that my blog has no reason to use, such as the microphone, camera, USB devices, and payment APIs.&lt;/p&gt;
&lt;h4&gt;The Result:&lt;/h4&gt;
&lt;p&gt;The outcome is exactly what I was hoping for: a fast, modern blog with an A+ security rating that is completely decoupled from my main portfolio. The workflow is simple—I write a post in a Markdown file, push it to GitHub, and Netlify handles the rest. It’s a setup I can trust while I focus on writing content and my job search.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Smartest Person in the Room is Quoting a Movie</title>
    <link href="https://blog.beaubremer.com/posts/Are_You_Playing_Chess/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://blog.beaubremer.com/posts/Are_You_Playing_Chess/</id>
    <content xml:lang="en" type="html">&lt;p&gt;You know the moment. You’re in a meeting, a debate, or just scrolling through Twitter, and someone drops the line. They lean back, maybe with a self-satisfied little smirk, and say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I’m playing chess, not checkers.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s meant to be the ultimate mic drop, a casual announcement that they&#39;re operating on a strategic level far beyond our lowly mortal comprehension. The issue? It&#39;s among the most loaned, overused, and confused lines out there.&lt;/p&gt;
&lt;h3&gt;The Humblebrag&#39;s Family Tree&lt;/h3&gt;
&lt;p&gt;Come on, the person who said this didn&#39;t invent the phrase. They’re channeling Denzel Washington’s iconic delivery in &lt;em&gt;Training Day&lt;/em&gt;. They&#39;re picturing themselves as Kobe Bryant schooling a rookie. They might even be referencing a business book—a real one is titled &lt;em&gt;Chess Not Checkers&lt;/em&gt;—as if that makes them a grandmaster of business.&lt;/p&gt;
&lt;p&gt;The term has been kicking around for decades. Samuel L. Jackson uttered a variation of it all the way back in 1994. Since then, it&#39;s been the go-to catchphrase for anyone who wants to sound intelligent without actually doing the work of, you know, being intelligent.&lt;/p&gt;
&lt;h3&gt;But Here&#39;s the Twist: You&#39;re Insulting the Wrong Game&lt;/h3&gt;
&lt;p&gt;Here&#39;s the real stinger in this whole comparison: Checkers is not really a &amp;quot;simple&amp;quot; game.&lt;/p&gt;
&lt;p&gt;While chess is complex, the number of possible board positions in checkers is estimated at around &lt;strong&gt;500 billion billion&lt;/strong&gt;. That&#39;s 5 x 10^20, a number so huge it&#39;s hard to wrap my head around it.&lt;/p&gt;
&lt;p&gt;This is no hypothetical number. It&#39;s the domain of legends like &lt;strong&gt;Dr. Marion Tinsley&lt;/strong&gt;, a math professor and very possibly the greatest checkers player who ever lived. Over 45 years, Tinsley lost a grand total of seven games—&lt;em&gt;seven&lt;/em&gt;. A shy genius who could look dozens of moves ahead, he once notably defeated a top computer program.&lt;/p&gt;
&lt;p&gt;If anyone was &amp;quot;playing chess,&amp;quot; it was the man who achieved near perfection in a game of cosmic complexity. And he did it with checkers.&lt;/p&gt;
&lt;h3&gt;The Irony of a Borrowed Boast&lt;/h3&gt;
&lt;p&gt;So, when somebody invokes the &amp;quot;chess, not checkers&amp;quot; phrase to declare their superior intelligence, it falls flat on two important levels.&lt;/p&gt;
&lt;p&gt;They&#39;re using a hand-me-down line to make a claim for originality. It&#39;s the equivalent of going to a design contest in a fast-fashion suit and proclaiming yourself an innovator. If your strategic brain is so genius, shouldn&#39;t your observations stand on their own? Why use a cliché to do the lifting?&lt;/p&gt;
&lt;p&gt;They&#39;re accidentally insulting something, and they&#39;re accidentally disrespecting a game of incredible depth. They&#39;re trying to sound smart by punching down at something they don&#39;t understand—a dead giveaway of someone not as smart as they think.&lt;/p&gt;
&lt;h3&gt;True Strategy Doesn&#39;t Need a Catchphrase&lt;/h3&gt;
&lt;p&gt;Real strategic thinking is understated, deliberate, and demonstrated through action, not announcement. It&#39;s being able to manage complexity, anticipate consequences, and articulate ideas with clarity and creativity.&lt;/p&gt;
&lt;p&gt;The most intelligent people don&#39;t need to tell you they&#39;re playing a different game. You see it in their result.&lt;/p&gt;
&lt;p&gt;Let your work, ideas, and unique voice do the talking. Play your own game, and let the stale cliches be for the parrots.&lt;/p&gt;
</content>
  </entry>
</feed>